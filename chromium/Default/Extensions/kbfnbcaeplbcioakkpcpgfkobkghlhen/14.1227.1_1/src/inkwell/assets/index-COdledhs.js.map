{"version":3,"file":"index-COdledhs.js","sources":["../../../util-view-container/dist/index.mjs"],"sourcesContent":["import { createDisposable, dispose } from '@grammarly/util-disposable';\nimport { Emitter } from '@grammarly/util-reactive';\nimport React from 'react';\n\n/**\n * Utilities for composing views from multiple sources in a single container.\n * @packageDocumentation\n */\n/**\n * A view container that implements React external store pattern to manage views.\n * @public\n * @example\n * ```tsx\n * const container = React.useMemo(() => new DefaultViewContainer<{ default: never }>(), [])\n * const slots = React.useSyncExternalStore(container.subscribe, container.getSnapshot)\n * // ... render slots\n * ```\n */\nclass DefaultViewContainer {\n    #views = new Map();\n    #onUpdate = new Emitter();\n    #counter = 0;\n    #snapshot = null;\n    /** {@inheritDoc ViewContainer} */\n    add(component, options) {\n        const target = this.#views.get(options.slot) ?? [];\n        const key = `v${this.#counter++}`;\n        this.#views.set(options.slot, [\n            ...target,\n            { key, view: React.createElement(component), options },\n        ]);\n        this.#notify();\n        return createDisposable(() => {\n            const views = this.#views.get(options.slot);\n            if (views) {\n                this.#views.set(options.slot, views.filter(view => view.key !== key));\n                this.#notify();\n            }\n        });\n    }\n    /**\n     * Clears all views from the container.\n     * @public\n     */\n    clear() {\n        this.#views.clear();\n        this.#notify();\n    }\n    #notify() {\n        this.#snapshot = null;\n        this.#onUpdate.emit();\n    }\n    /**\n     * Subscribes to updates of the view container.\n     * @param onUpdate - A callback to invoke when the view container updates.\n     * @returns A function to unsubscribe from the updates.\n     */\n    subscribe = (onUpdate) => {\n        const disposable = this.#onUpdate.subscribe(onUpdate);\n        return () => dispose(disposable);\n    };\n    /**\n     * Returns a snapshot of the view container.\n     * @returns A snapshot of slots in the view container.\n     */\n    getSnapshot = () => (this.#snapshot ??= Object.fromEntries(this.#views.entries()));\n}\n\nexport { DefaultViewContainer };\n//# sourceMappingURL=index.mjs.map\n"],"names":["DefaultViewContainer","__privateAdd","_DefaultViewContainer_instances","_views","_onUpdate","Emitter","_counter","_snapshot","__publicField","onUpdate","disposable","__privateGet","dispose","_a","__privateSet","component","options","target","key","__privateWrapper","React","__privateMethod","notify_fn","createDisposable","views","view"],"mappings":"ovBAkBA,MAAMA,CAAqB,CAA3B,cAAAC,EAAA,KAAAC,GACID,EAAA,KAAAE,EAAS,IAAI,KACbF,EAAA,KAAAG,EAAY,IAAIC,GAChBJ,EAAA,KAAAK,EAAW,GACXL,EAAA,KAAAM,EAAY,MAmCZC,EAAA,iBAAaC,GAAa,CACtB,MAAMC,EAAaC,EAAA,KAAKP,GAAU,UAAUK,CAAQ,EACpD,MAAO,IAAMG,EAAQF,CAAU,CACvC,GAKIF,EAAA,mBAAc,IAAA,OAAO,OAAAK,EAAAF,EAAA,KAAKJ,KAAL,KAAAM,EAAAC,EAAA,KAAKP,EAAc,OAAO,YAAYI,EAAA,KAAKR,GAAO,QAAS,CAAA,KAzChF,IAAIY,EAAWC,EAAS,OACpB,MAAMC,GAASJ,EAAAF,EAAA,KAAKR,GAAO,IAAIa,EAAQ,IAAI,IAA5B,KAAAH,EAAiC,GAC1CK,EAAM,IAAS,OAALC,EAAA,KAAKb,GAAL,KAChB,OAAAK,EAAA,KAAKR,GAAO,IAAIa,EAAQ,KAAM,CAC1B,GAAGC,EACH,CAAE,IAAAC,EAAK,KAAME,EAAM,cAAcL,CAAS,EAAG,QAAAC,CAAS,CAClE,CAAS,EACDK,EAAA,KAAKnB,EAAAoB,GAAL,WACOC,EAAiB,IAAM,CAC1B,MAAMC,EAAQb,EAAA,KAAKR,GAAO,IAAIa,EAAQ,IAAI,EACtCQ,IACAb,EAAA,KAAKR,GAAO,IAAIa,EAAQ,KAAMQ,EAAM,OAAOC,GAAQA,EAAK,MAAQP,CAAG,CAAC,EACpEG,EAAA,KAAKnB,EAAAoB,GAAL,WAEhB,CAAS,CACJ,CAKD,OAAQ,CACJX,EAAA,KAAKR,GAAO,QACZkB,EAAA,KAAKnB,EAAAoB,GAAL,UACH,CAmBL,CA/CInB,EAAA,YACAC,EAAA,YACAE,EAAA,YACAC,EAAA,YAJJL,EAAA,YA8BIoB,EAAO,UAAG,CACNR,EAAA,KAAKP,EAAY,MACjBI,EAAA,KAAKP,GAAU,MAClB"}