{"version":3,"file":"index-DCn8g2bz.js","sources":["../../../feature-capi-suggestion/src/CAPISuggestionProvider.ts","../../../feature-capi-suggestion/src/index.ts"],"sourcesContent":["import type { TextDocument } from '@grammarly/feature-document-session'\nimport type { SuggestionId, TransformJson } from '@grammarly/feature-suggestion'\nimport type { RawCAPIAlert } from '@grammarly/util-capi-alert'\nimport type { CAPIConnection, CAPISessionId } from '@grammarly/util-capi-client'\nimport type {\n  AlertChangesEvent,\n  AlertEvent,\n  CAPIEvent,\n  RemoveEvent,\n} from '@grammarly/util-capi-protocol'\nimport { filter, map, toArray } from '@grammarly/util-iterable'\nimport { logger, type Logger } from '@grammarly/util-logging'\nimport { Rx } from '@grammarly/util-reactive'\nimport { TextRevision, TextRevisionSynchronizedQueue } from '@grammarly/util-text'\nimport { pipe } from '@grammarly/util-function'\nimport type { CAPISuggestion, CAPISuggestionProvider } from './CAPISuggestion'\n\n/** @internal */\nexport class DefaultCAPISuggestionProvider implements CAPISuggestionProvider, Disposable {\n  readonly #logger: Logger\n  readonly #disposableStack = new DisposableStack()\n  readonly #rawAlerts = new Map<\n    SuggestionId,\n    { readonly alert: RawCAPIAlert; readonly sessionId: CAPISessionId }\n  >()\n\n  readonly #suggestionUpsertedEmitter = new Rx.Subject<readonly CAPISuggestion[]>()\n  readonly #suggestionRemovedEmitter = new Rx.Subject<readonly SuggestionId[]>()\n\n  readonly #document: TextDocument\n  readonly #capiEventsQueue = new TextRevisionSynchronizedQueue<CAPIEvent>()\n\n  #sessionId: CAPISessionId | null = null\n\n  readonly onSuggestionUpserted = Rx.toSubscribable(this.#suggestionUpsertedEmitter)\n  readonly onSuggestionRemoved = Rx.toSubscribable(this.#suggestionRemovedEmitter)\n\n  constructor(document: TextDocument, connection: CAPIConnection) {\n    this.#document = document\n    this.#logger = logger.createLogger('CAPISuggestionProvider', document.id)\n    this.#disposableStack.use(\n      connection.status.subscribe(status => {\n        if (status.kind === 'connected') {\n          this.#sessionId = status.sessionId\n        }\n        if (status.kind === 'connected' && status.isNewSession) {\n          // For robustness in case connection status is not in sync with CAPI events (2 different streams)\n          // we only remove suggestions that don't belong to the new session.\n          const suggestionsToRemove = pipe(\n            this.#rawAlerts.entries(),\n            // Remove alerts that don't belong to the new session.\n            filter(([_, { sessionId }]) => sessionId !== status.sessionId),\n            map(([id]) => id),\n            toArray,\n          )\n          this.#suggestionRemovedEmitter.next(suggestionsToRemove)\n          suggestionsToRemove.forEach(suggestionId => this.#rawAlerts.delete(suggestionId))\n          this.#logger.verbose(\n            `Reset alert collection for document ${this.#document.id} and session ID ${status.sessionId}`,\n          )\n        }\n      }),\n    )\n    this.#disposableStack.use(\n      this.#capiEventsQueue.messages.subscribe(event => this.#handleCAPIEvent(event)),\n    )\n    this.#disposableStack.use(\n      connection.onEvent.subscribe(event =>\n        this.#capiEventsQueue.enqueue(\n          event,\n          'rev' in event ? TextRevision.create(event.rev) : undefined,\n        ),\n      ),\n    )\n    this.#disposableStack.use(\n      document.text.subscribe(({ revision }) =>\n        this.#capiEventsQueue.pushNewTextRevision(revision),\n      ),\n    )\n    this.#disposableStack.defer(() => {\n      this.#suggestionRemovedEmitter.next(toArray(this.#rawAlerts.keys()))\n      this.#rawAlerts.clear()\n      this.#logger.verbose(`Clear alert collection for document ${this.#document.id}`)\n    })\n  }\n\n  #handleCAPIEvent(event: CAPIEvent) {\n    switch (event.action) {\n      case 'alert':\n        return this.#handleAlertAdd(event)\n      case 'alert_changes':\n        return this.#handleAlertUpdate(event)\n      case 'remove':\n        return this.#handleAlertRemove(event)\n      default:\n        // Ignore other messages\n        return\n    }\n  }\n\n  #handleAlertAdd({ action, ...event }: AlertEvent) {\n    if (this.#sessionId === null) return\n\n    const suggestionId = String(event.id) as SuggestionId\n    const capiSuggestion: CAPISuggestion = {\n      id: suggestionId,\n      kind: 'capi',\n      revision: TextRevision.create(event.rev),\n      transforms: extractTransforms(event),\n      alert: event,\n    }\n    this.#rawAlerts.set(suggestionId, { alert: event, sessionId: this.#sessionId })\n    this.#suggestionUpsertedEmitter.next([capiSuggestion])\n  }\n\n  #handleAlertUpdate({ action, ...event }: AlertChangesEvent) {\n    if (this.#sessionId === null) return\n\n    const suggestionId = String(event.id) as SuggestionId\n    const { alert: rawAlert } = this.#rawAlerts.get(suggestionId) ?? {}\n    if (!rawAlert) return\n\n    const newRawAlert = { ...rawAlert, ...event }\n\n    const capiSuggestion: CAPISuggestion = {\n      id: suggestionId,\n      kind: 'capi',\n      revision: TextRevision.create(event.rev),\n      transforms: extractTransforms(event),\n      alert: newRawAlert,\n    }\n    this.#rawAlerts.set(suggestionId, { alert: newRawAlert, sessionId: this.#sessionId })\n    this.#suggestionUpsertedEmitter.next([capiSuggestion])\n  }\n\n  #handleAlertRemove(event: RemoveEvent) {\n    const suggestionId = String(event.id) as SuggestionId\n    this.#rawAlerts.delete(suggestionId)\n    this.#suggestionRemovedEmitter.next([suggestionId])\n  }\n\n  [Symbol.dispose]() {\n    this.#disposableStack.dispose()\n  }\n}\n\nfunction extractTransforms(\n  alert: Partial<Pick<RawCAPIAlert, 'transformJson' | 'subalerts'>>,\n): TransformJson[] {\n  if (alert.transformJson) {\n    const context = alert.transformJson.context\n    return [\n      {\n        context: { start: context.s, end: context.e },\n        alternatives: alert.transformJson.alternatives,\n      },\n    ]\n  } else if (alert.subalerts) {\n    return alert.subalerts.flatMap(extractTransforms)\n  } else {\n    return []\n  }\n}\n","/**\n * This feature package is responsible for registering CAPI suggestions into `SuggestionManager`\n * and provides a token to access the CAPI suggestion collection (also accessible from `SuggestionManager`).\n * @packageDocumentation\n */\n\nimport type { Activate, ExecutionScopeDefinition, Feature } from '@grammarly/feature'\nimport { createInjectionToken, defineFactory, Lifetime } from '@grammarly/util-dependency-container'\nimport { pipe } from '@grammarly/util-function'\nimport { AsyncResult, Result, ResultDisposable } from '@grammarly/util-result'\nimport type { CAPISuggestionCollection, CAPISuggestionProvider } from './CAPISuggestion'\nimport { DefaultCAPISuggestionProvider } from './CAPISuggestionProvider'\n\nimport type {} from '@grammarly/feature-capi'\nimport type {} from '@grammarly/feature-document-session'\nimport type {} from '@grammarly/feature-suggestion'\n\nexport type {\n  CAPISuggestion,\n  CAPISuggestionCollection,\n  CAPISuggestionProvider,\n} from './CAPISuggestion'\n\n/** @public */\nexport const CAPISuggestionProviderToken = createInjectionToken<CAPISuggestionProvider>(\n  Symbol('CAPISuggestionProvider'),\n)\n\n/** @public */\nexport const CAPISuggestionCollectionToken = createInjectionToken<CAPISuggestionCollection>(\n  Symbol('CAPISuggestionCollection'),\n)\n\n/** @public */\nexport const activate: Activate = context =>\n  pipe(\n    Result.all([\n      context.getExecutionScope('document-session'),\n      context.getFeature('document-session'),\n      context.getFeature('suggestion'),\n      context.getFeature('capi'),\n    ] as const),\n    Result.flatMap(\n      ([documentSessionScope, documentSessionFeature, suggestionFeature, capiFeature]) =>\n        ResultDisposable.all([\n          ...registerDependencies(\n            documentSessionScope,\n            documentSessionFeature,\n            capiFeature,\n            suggestionFeature,\n          ),\n          Result.success(\n            documentSessionScope.onStart(execution =>\n              pipe(\n                AsyncResult.all([\n                  execution.resolve(suggestionFeature.provides.SuggestionManager),\n                  execution.resolve(CAPISuggestionProviderToken),\n                ] as const),\n                AsyncResult.map(([suggestionManager, capiSuggestionProvider]) =>\n                  suggestionManager.register(capiSuggestionProvider),\n                ),\n              ),\n            ),\n          ),\n        ]),\n    ),\n  )\n\nfunction registerDependencies(\n  documentSessionScope: ExecutionScopeDefinition<'document-session'>,\n  documentSessionFeature: Feature<'document-session'>,\n  capiFeature: Feature<'capi'>,\n  suggestionFeature: Feature<'suggestion'>,\n) {\n  return [\n    documentSessionScope.register(\n      {\n        token: CAPISuggestionProviderToken,\n        useFactory: defineFactory(DefaultCAPISuggestionProvider, [\n          documentSessionFeature.provides.TextDocument,\n          capiFeature.provides.CAPIConnection,\n        ]),\n      },\n      { lifetime: Lifetime.ContainerScoped },\n    ),\n    documentSessionScope.register(\n      {\n        token: CAPISuggestionCollectionToken,\n        useFactory: resolver =>\n          pipe(\n            resolver.resolve(suggestionFeature.provides.SuggestionManager),\n            Result.map(suggestionManager => suggestionManager.getCollection('capi')),\n          ),\n      },\n      {\n        lifetime: Lifetime.ContainerScoped,\n      },\n    ),\n  ]\n}\n"],"names":["_logger","_disposableStack","_rawAlerts","_suggestionUpsertedEmitter","_suggestionRemovedEmitter","_document","_capiEventsQueue","_sessionId","_DefaultCAPISuggestionProvider_instances","handleCAPIEvent_fn","handleAlertAdd_fn","handleAlertUpdate_fn","handleAlertRemove_fn","DefaultCAPISuggestionProvider","document","connection","__privateAdd","Rx","TextRevisionSynchronizedQueue","__publicField","__privateGet","__privateSet","logger","status","suggestionsToRemove","pipe","filter","_","sessionId","map","id","toArray","suggestionId","__privateMethod","event","TextRevision.create","revision","action","capiSuggestion","extractTransforms","_a","rawAlert","newRawAlert","alert","context","CAPISuggestionProviderToken","createInjectionToken","CAPISuggestionCollectionToken","activate","Result.all","Result.flatMap","documentSessionScope","documentSessionFeature","suggestionFeature","capiFeature","ResultDisposable","registerDependencies","Result.success","execution","AsyncResult.all","AsyncResult.map","suggestionManager","capiSuggestionProvider","defineFactory","Lifetime","resolver","Result.map"],"mappings":"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"}