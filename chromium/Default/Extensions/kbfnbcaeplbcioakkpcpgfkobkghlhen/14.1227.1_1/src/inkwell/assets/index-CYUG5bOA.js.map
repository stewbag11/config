{"version":3,"file":"index-CYUG5bOA.js","sources":["../../../util-reactive/dist/SingleConsumerBufferedEmitter-DlWHew.mjs","../../../feature-connector/src/capi/BufferedConnectorCAPI.ts","../../../feature-connector/src/capi/PerDocumentCAPITransportFactory.ts","../../../util-caching/dist/LRUCache-CKl1z6.mjs","../../../feature-connector/src/RemoteDocument.ts","../../../feature-connector/src/ConnectorDocumentManager.ts","../../../feature-connector/src/ConnectorMessageTransport.ts","../../../feature-connector/src/dependencies.ts","../../../feature-connector/src/extensions/ConnectorCAPI.ts","../../../feature-connector/src/extensions/ConnectorExperimentation.ts","../../../feature-connector/src/extensions/ConnectorTextDecoration.ts","../../../feature-connector/src/index.ts"],"sourcesContent":["import { createDisposable } from '@grammarly/util-disposable';\nimport { logger } from '@grammarly/util-logging';\nimport { toObserver } from './Observer-DUozTT.mjs';\n\n/**\n * Expects a single subscriber and buffers events until the subscriber connects.\n * Repeats the buffering when the subscriber disconnects.\n * @public\n */\nclass SingleConsumerBufferedEmitter {\n    #buffer = [];\n    #observer = null;\n    #closed = false;\n    emit(value) {\n        if (this.#observer) {\n            this.#observer.next(value);\n        }\n        else {\n            this.#buffer.push(value);\n        }\n    }\n    subscribe(observer) {\n        if (this.#closed) {\n            logger.warn('Cannot subscribe to closed SingleConsumerBufferedEmitter');\n            return createDisposable(() => { });\n        }\n        if (this.#observer) {\n            logger.error(`SingleConsumerBufferedEmitter supports only one subscriber.`);\n            return createDisposable(() => { });\n        }\n        using disposable = new DisposableStack();        this.#observer = toObserver(observer);\n        disposable.defer(() => (this.#observer = null));\n        this.#buffer.forEach(value => this.#observer?.next(value));\n        this.#buffer.length = 0;\n        return disposable.move();\n    }\n    [Symbol.dispose]() {\n        this.#observer?.complete();\n        this.#observer = null;\n        this.#closed = true;\n    }\n}\n\nexport { SingleConsumerBufferedEmitter };\n//# sourceMappingURL=SingleConsumerBufferedEmitter-DlWHew.mjs.map\n","import { dispose } from '@grammarly/util-disposable'\nimport { SingleConsumerBufferedEmitter } from '@grammarly/util-reactive'\nimport type { ConnectorDocumentDataManager } from '../ConnectorDocumentManager'\nimport type { ConnectorCAPI, ConnectorCAPIMessage } from '../extensions/ConnectorCAPI'\nimport type { DocumentID } from '../RemoteDocument'\n\n/**\n * Splits the ConnectorCAPI by documentID and buffers messages until the document is subscribed.\n */\nexport class BufferedConnectorCAPI implements Disposable {\n  readonly #connector: ConnectorCAPI\n  readonly #buffers = new Map<DocumentID, SingleConsumerBufferedEmitter<ConnectorCAPIMessage>>()\n  readonly #disposables = new DisposableStack()\n\n  constructor(connector: ConnectorCAPI, manager: ConnectorDocumentDataManager) {\n    this.#connector = connector\n    this.#disposables.use(\n      this.#connector.onMessage.subscribe(request =>\n        this.#getOrCreateBuffer(request.message).emit(request),\n      ),\n    )\n    this.#disposables.use(\n      manager.onDocumentWillDestroy.subscribe(document => {\n        dispose(this.#buffers.get(document.id))\n        this.#buffers.delete(document.id)\n      }),\n    )\n    this.#disposables.defer(() => {\n      dispose(this.#buffers.values())\n      this.#buffers.clear()\n    })\n  }\n\n  #getOrCreateBuffer(request: { readonly documentID: string }) {\n    const documentID = request.documentID as DocumentID\n    let buffer = this.#buffers.get(documentID)\n    if (!buffer) {\n      buffer = new SingleConsumerBufferedEmitter()\n      this.#buffers.set(documentID, buffer)\n    }\n    return buffer\n  }\n\n  create(documentID: DocumentID): ConnectorCAPI {\n    return {\n      onMessage: this.#getOrCreateBuffer({ documentID }),\n      send: request => this.#connector.send({ ...request, documentID }),\n    }\n  }\n\n  [Symbol.dispose]() {\n    this.#disposables.dispose()\n  }\n}\n","import type {\n  CAPISessionId,\n  CAPITransport,\n  CAPITransportCloseEvent,\n  CAPITransportFactory,\n  CreateCAPITransportOptions,\n} from '@grammarly/util-capi-client'\nimport type { CAPIEvent } from '@grammarly/util-capi-protocol'\nimport { dispose } from '@grammarly/util-disposable'\nimport { CustomError } from '@grammarly/util-error'\nimport { pipe, sideEffect } from '@grammarly/util-function'\nimport { logger } from '@grammarly/util-logging'\nimport { Emitter, Rx, SingleConsumerBufferedEmitter } from '@grammarly/util-reactive'\nimport { AsyncResult } from '@grammarly/util-result'\nimport { TextRevisionSynchronizedQueue, type TextRevision } from '@grammarly/util-text'\nimport type { ConnectorCAPI } from '../extensions/ConnectorCAPI'\nimport type { DocumentID } from '../RemoteDocument'\n\ntype CAPIRevision = number\n\n/** @internal */\nexport class PerDocumentCAPITransportFactory implements CAPITransportFactory, Disposable {\n  readonly #source: ConnectorCAPI\n  readonly #documentId: DocumentID\n\n  #sessionID: CAPISessionId | null = null\n  #subscription: Disposable | null = null\n\n  constructor(documentId: DocumentID, source: ConnectorCAPI) {\n    this.#documentId = documentId\n    this.#source = source\n  }\n\n  [Symbol.dispose]() {\n    dispose(this.#subscription)\n  }\n\n  async create(_: CreateCAPITransportOptions): AsyncResult<CAPITransport> {\n    dispose(this.#subscription)\n\n    let sessionID = this.#sessionID\n    const currentLogger = logger.createLogger('CAPITransport', this.#documentId)\n    const documentID = this.#documentId\n    const capiToDocumentRevision = new Map<CAPIRevision, TextRevision>()\n    const queue = new TextRevisionSynchronizedQueue<CAPIEvent, CAPIRevision>()\n    const onDidReceive = new SingleConsumerBufferedEmitter<CAPIEvent>()\n    const onDidClose = new Emitter<CAPITransportCloseEvent>()\n    const onDidError = new Emitter<Error>()\n    const connected = Promise.withResolvers<CAPISessionId>()\n    const disposables = new DisposableStack()\n\n    if (sessionID !== null) {\n      connected.resolve(sessionID)\n    }\n    const subscription = this.#source.onMessage.subscribe(request => {\n      if (disposables.disposed) {\n        return logger.warn('Received a message after the transport was disposed.')\n      }\n      switch (request.kind) {\n        case 'connected':\n          // Storing the CAPI session ID on instance so it can be used for next transport creation\n          // as event can be consumed only once.\n          this.#sessionID = request.message.sessionID as CAPISessionId\n          if (sessionID === null) {\n            sessionID = request.message.sessionID as CAPISessionId\n            currentLogger.verbose(`Connected to session ${sessionID}`)\n            connected.resolve(sessionID)\n          } else if (sessionID !== request.message.sessionID) {\n            currentLogger.warn(\n              `Received a 'connected' message for session \"${request.message.sessionID}\" while already connected with the session ${sessionID}.`,\n            )\n            dispose(subscription)\n            onDidClose.emit({ webSocket: undefined })\n          }\n          break\n        case 'disconnected':\n          if (this.#sessionID === request.message.sessionID) this.#sessionID = null\n          if (sessionID === request.message.sessionID) {\n            connected.reject(new CAPITransportDisconnectedError(sessionID))\n            currentLogger.verbose(`Disconnected from session ${sessionID}`)\n            sessionID = null\n            dispose(subscription)\n            onDidClose.emit({ webSocket: undefined })\n          } else if (sessionID !== null) {\n            currentLogger.warn(\n              `Received a 'disconnected' message for session \"${request.message.sessionID}\" while connected with the session \"${sessionID}\".`,\n            )\n          } else {\n            currentLogger.warn(\n              `Received a 'disconnected' message for session \"${request.message.sessionID}\" while not connected.`,\n            )\n          }\n          break\n        case 'messageReceived': {\n          const message = request.message.message as unknown as CAPIEvent\n          if (sessionID === null) {\n            sessionID = request.message.sessionID as CAPISessionId\n            currentLogger.verbose(`Connected to session ${sessionID}`)\n            this.#sessionID = sessionID\n            connected.resolve(sessionID)\n            currentLogger.warn(\n              `Received a '${message.action}' message before 'connected' message. Assuming CAPI is connected with the session \"${sessionID}\".`,\n            )\n            void queue.enqueue(message, 'rev' in message ? message.rev : undefined)\n          } else if (sessionID === request.message.sessionID) {\n            void queue.enqueue(message, 'rev' in message ? message.rev : undefined)\n          } else {\n            currentLogger.warn(\n              `Received a '${message.action}' message for session \"${request.message.sessionID}\" while connected with the session \"${sessionID}\".`,\n            )\n          }\n          break\n        }\n        case 'textRevision': {\n          const { capiRevision, documentRevision } = request.message\n          if (sessionID === request.message.sessionID) {\n            currentLogger.verbose('Received text revision:', request.message)\n            capiToDocumentRevision.set(capiRevision, documentRevision as TextRevision)\n            queue.pushNewTextRevision(capiRevision)\n          } else {\n            currentLogger.warn(\n              `Received a text revision (capi ${capiRevision} -> ${documentRevision}) for session \"${request.message.sessionID}\" while connected with the session \"${sessionID}\".`,\n            )\n          }\n          break\n        }\n      }\n    })\n    disposables.use(subscription)\n    this.#subscription = subscription\n\n    // Forwarding messages to the onDidReceive emitter which will buffer them until the transport\n    // is created and the consumer is ready to receive them.\n    disposables.use(\n      pipe(\n        Rx.fromSubscribable(queue.messages),\n        Rx.subscribe(message => {\n          if ('rev' in message) {\n            const documentRevision = capiToDocumentRevision.get(message.rev)\n            if (documentRevision === undefined) {\n              currentLogger.warn(\n                `Received a message (${message.action}) with unknown revision ${message.rev}`,\n              )\n            } else {\n              Reflect.set(message, 'rev', documentRevision)\n            }\n            // Ideally, we should delete the mapping here, but sometimes we get more alerts with the same revision\n            // due to partial checks finishing before the full check. So, we will let the revision map grow until\n            // CAPI reconnects.\n            // NOTE: we could use CAPI finished with 'all_checks_completed' to determine when to prune revisions.\n          }\n\n          onDidReceive.emit(message)\n        }),\n      ),\n    )\n\n    return AsyncResult.unsafe(async () => {\n      const sessionId = await connected.promise\n\n      return {\n        sessionId,\n        send: message => {\n          if (sessionID === null) {\n            currentLogger.warn('Attempt to send a message without a sessionID')\n            currentLogger.verbose('Message:', message)\n          } else {\n            void pipe(\n              this.#source.send({ documentID, sessionID, message }),\n              AsyncResult.mapError(\n                sideEffect(error => {\n                  currentLogger.error('Failed to send a message', error)\n                  currentLogger.verbose('Message:', message)\n                }),\n              ),\n            )\n          }\n          return undefined\n        },\n        onDidClose,\n        onDidError,\n        onDidReceive,\n        [Symbol.dispose]() {\n          disposables.dispose()\n        },\n      } satisfies CAPITransport\n    })\n  }\n\n  toString(): string {\n    return `PerDocumentTransportFactory(${this.#documentId})`\n  }\n}\n\n/**\n * CAPITransport disconnected error.\n * @public\n */\nexport class CAPITransportDisconnectedError extends CustomError {\n  constructor(capiSessionId: CAPISessionId | null) {\n    super(`CAPI Transport disconnected (SessionId: ${capiSessionId})`)\n  }\n}\n","/**\n * Least Recently Used (LRU) cache.\n * @public\n */\nclass LRUCache {\n    #capacity;\n    #nodes = new Map();\n    #head = null;\n    #tail = null;\n    /**\n     * @param options - Options to set the cache capacity.\n     */\n    constructor(options) {\n        this.#capacity = options.capacity;\n    }\n    /** Get the value for the key and mark the key as the most recently used */\n    get(key) {\n        const node = this.#nodes.get(key);\n        if (node) {\n            this.#unlink(node);\n            this.#setHead(node);\n            return node.value;\n        }\n        return undefined;\n    }\n    /** Set the value for a key and mark the key as the most recently used */\n    set(key, value) {\n        const node = this.#nodes.get(key);\n        if (node) {\n            node.value = value;\n            this.#unlink(node);\n            this.#setHead(node);\n        }\n        else {\n            if (this.#nodes.size >= this.#capacity && this.#tail) {\n                this.#nodes.delete(this.#tail.key);\n                this.#unlink(this.#tail);\n            }\n            const node = {\n                key,\n                value,\n                prev: null,\n                next: null,\n            };\n            this.#setHead(node);\n            this.#nodes.set(key, node);\n        }\n    }\n    /** Delete an entry by key */\n    delete(key) {\n        const node = this.#nodes.get(key);\n        if (node) {\n            this.#unlink(node);\n            this.#nodes.delete(key);\n        }\n    }\n    /** Clear the cache */\n    clear() {\n        this.#nodes.clear();\n        this.#head = null;\n        this.#tail = null;\n    }\n    #unlink(node) {\n        if (node === this.#head) {\n            this.#head = node.next;\n        }\n        if (node === this.#tail) {\n            this.#tail = node.prev;\n        }\n        if (node.prev) {\n            node.prev.next = node.next;\n        }\n        if (node.next) {\n            node.next.prev = node.prev;\n        }\n        node.prev = null;\n        node.next = null;\n    }\n    #setHead(node) {\n        if (this.#head) {\n            this.#head.prev = node;\n        }\n        node.prev = null;\n        node.next = this.#head;\n        this.#head = node;\n        if (this.#tail === null) {\n            this.#tail = this.#head;\n        }\n    }\n}\n\nexport { LRUCache };\n//# sourceMappingURL=LRUCache-CKl1z6.mjs.map\n","import type {\n  ConnectorInkwellOutbound,\n  DocumentGeometryChangeReason,\n  HandshakeOptions,\n  PixelKind,\n} from '@grammarly/util-connector-protocol'\nimport { Delta } from '@grammarly/util-delta'\nimport { identity, pipe } from '@grammarly/util-function'\nimport {\n  Point,\n  Rect,\n  type ContentPoint,\n  type DocumentViewportRect,\n  type ScreenRect,\n  type ViewportRect,\n  type WindowRect,\n} from '@grammarly/util-geometry'\nimport { map } from '@grammarly/util-iterable'\nimport { logger, type Logger } from '@grammarly/util-logging'\nimport { Rx, type Subscribable, type SubscribableState } from '@grammarly/util-reactive'\nimport { AsyncResult } from '@grammarly/util-result'\nimport type { RemoteFunctionExecutor } from '@grammarly/util-rpc'\nimport {\n  TextRevision,\n  type TextChange,\n  type TextContent,\n  type TextRange,\n} from '@grammarly/util-text'\nimport type { ConnectorID } from './ConnectorMessageTransport'\n\n/**\n * A unique identifier for a document.\n * @public\n */\nexport type DocumentID = string & { readonly __DocumentID: unique symbol }\n\n/**\n * An interface that exposes the data for a document hosted by a connector.\n * This interface does not expose methods, this is done by {@link RemoteDocumentClient}.\n * @public\n */\nexport interface RemoteDocumentData extends Disposable {\n  /**\n   * ID of the document.\n   */\n  readonly id: DocumentID\n  /**\n   * ID of the connector connection.\n   */\n  // TODO: This information will be stale after a Connector re-connection. Make it a Subscribable?\n  readonly connectorId: ConnectorID\n  /**\n   * Fired when the document focus changes.\n   */\n  readonly hasFocus: SubscribableState<boolean>\n  /**\n   * Pixel kind of the document.\n   */\n  readonly pixelKind: PixelKind\n  /**\n   * Fired when the geometry is about to change.\n   */\n  readonly onGeometryWillChange: Subscribable<ReadonlySet<DocumentGeometryChangeReason>>\n  /**\n   * Fired when the geometry changes.\n   */\n  readonly onGeometryDidChange: Subscribable<ReadonlySet<DocumentGeometryChangeReason>>\n  /**\n   * Fired when the text changes.\n   */\n  readonly onTextDidChange: Subscribable<TextChange>\n  /**\n   * Fired when the selection changes.\n   */\n  readonly onSelectionDidChange: Subscribable<Iterable<TextRange>>\n}\n\n/**\n * Methods that can be called on a document hosted by a connector.\n * @public\n */\nexport interface RemoteDocument extends RemoteDocumentData {\n  /**\n   * Get the text of the document.\n   */\n  getText(): AsyncResult<TextContent>\n  /**\n   * Set the text of the document.\n   */\n  setText(text: TextChange): AsyncResult<void>\n  /**\n   * Set the selection.\n   */\n  setSelection(revision: TextRevision, ranges: readonly TextRange[]): AsyncResult<void>\n  /**\n   * Get the geometry of the document.\n   */\n  getGeometry(): AsyncResult<RemoteDocumentGeometryInfo>\n  /**\n   * Get rects for the given text ranges.\n   */\n  getRectsForRanges<Id extends string>(\n    revision: TextRevision,\n    ranges: ReadonlyMap<Id, TextRange>,\n  ): AsyncResult<{\n    readonly rects: Map<Id, DocumentViewportRect[]>\n    readonly textRevision: TextRevision\n  }>\n  /**\n   * Get bounding boxes for the given text ranges.\n   */\n  getBoundingRectForRanges<Id extends string>(\n    revision: TextRevision,\n    ranges: ReadonlyMap<Id, TextRange>,\n  ): AsyncResult<{\n    readonly rects: Map<Id, DocumentViewportRect>\n    readonly textRevision: TextRevision\n  }>\n}\n\n/**\n * Geometry information for a remote document.\n * @public\n */\nexport interface RemoteDocumentGeometryInfo {\n  /**\n   * Size and position of the window in screen coordinates.\n   */\n  readonly windowFrame: ScreenRect\n  /**\n   * Size and position of the viewport in window coordinates.\n   */\n  readonly viewportFrame: WindowRect\n  /**\n   * Size and position of the document in viewport coordinates.\n   */\n  readonly documentFrame: ViewportRect\n  /**\n   * Scroll position of the document frame.\n   */\n  readonly scrollPosition?: ContentPoint\n  /**\n   * Range of text that is currently visible in the viewport.\n   */\n  readonly visibleTextRange: TextRange\n}\n\nexport class DefaultRemoteDocumentData implements RemoteDocumentData {\n  readonly #disposables = new DisposableStack()\n\n  readonly id: DocumentID\n  readonly connectorId: ConnectorID\n\n  readonly hasFocusState = new Rx.BehaviorSubject<boolean>(false)\n  readonly geometryWillChange = new Rx.Subject<ReadonlySet<DocumentGeometryChangeReason>>()\n  readonly geometryDidChange = new Rx.Subject<ReadonlySet<DocumentGeometryChangeReason>>()\n  readonly textDidChange = new Rx.Subject<TextChange>()\n  readonly selectionDidChange = new Rx.Subject<Iterable<TextRange>>()\n\n  readonly settings: HandshakeOptions\n\n  constructor(connectorId: ConnectorID, documentId: DocumentID, settings: HandshakeOptions = {}) {\n    this.id = documentId\n    this.connectorId = connectorId\n    this.settings = settings\n\n    this.#disposables.defer(() => {\n      this.hasFocusState.complete()\n      this.geometryDidChange.complete()\n      this.geometryWillChange.complete()\n      this.selectionDidChange.complete()\n      this.textDidChange.complete()\n      this.selectionDidChange.complete()\n    })\n  }\n\n  get pixelKind(): PixelKind {\n    return this.settings.pixelKind ?? 'physical'\n  }\n\n  [Symbol.dispose](): void {\n    this.#disposables.dispose()\n  }\n\n  public get hasFocus() {\n    return Rx.toSubscribableState(this.hasFocusState)\n  }\n\n  public get onGeometryWillChange() {\n    return Rx.toSubscribable(this.geometryWillChange)\n  }\n\n  public get onGeometryDidChange() {\n    return Rx.toSubscribable(this.geometryDidChange)\n  }\n\n  public get onTextDidChange() {\n    return Rx.toSubscribable(this.textDidChange)\n  }\n\n  public get onSelectionDidChange() {\n    return Rx.toSubscribable(this.selectionDidChange)\n  }\n}\n\nexport class DefaultRemoteDocument implements RemoteDocument {\n  readonly #connector: RemoteFunctionExecutor<ConnectorInkwellOutbound>\n  readonly #logger: Logger\n  readonly #document: RemoteDocumentData\n\n  constructor(\n    document: RemoteDocumentData,\n    connector: RemoteFunctionExecutor<ConnectorInkwellOutbound>,\n  ) {\n    this.#logger = logger.createLogger('RemoteDocument', document.id)\n    this.#document = document\n    this.#connector = connector\n  }\n\n  get id(): DocumentID {\n    return this.#document.id\n  }\n  get connectorId(): ConnectorID {\n    return this.#document.connectorId\n  }\n  get hasFocus(): SubscribableState<boolean> {\n    return this.#document.hasFocus\n  }\n  get pixelKind(): PixelKind {\n    return this.#document.pixelKind\n  }\n  get onGeometryWillChange(): Subscribable<ReadonlySet<DocumentGeometryChangeReason>> {\n    return this.#document.onGeometryWillChange\n  }\n  get onGeometryDidChange(): Subscribable<ReadonlySet<DocumentGeometryChangeReason>> {\n    return this.#document.onGeometryDidChange\n  }\n  get onTextDidChange(): Subscribable<TextChange> {\n    return this.#document.onTextDidChange\n  }\n  get onSelectionDidChange(): Subscribable<Iterable<TextRange>> {\n    return this.#document.onSelectionDidChange\n  }\n\n  [Symbol.dispose]() {\n    this.#document[Symbol.dispose]()\n  }\n\n  async getText(): AsyncResult<TextContent> {\n    return await pipe(\n      this.#connector.execute('getDocumentText', { documentID: this.#document.id }),\n      AsyncResult.map(response => ({\n        revision: response.revision as TextRevision,\n        content: new Delta(response.document.ops),\n      })),\n    )\n  }\n\n  async setText(textChange: TextChange): AsyncResult<void> {\n    return await this.#connector.execute('applyDocumentTextChange', {\n      documentID: this.#document.id,\n      revision: textChange.revision,\n      changes: textChange.change,\n    })\n  }\n\n  async setSelection(revision: TextRevision, ranges: readonly TextRange[]): AsyncResult<void> {\n    return await this.#connector.execute('setDocumentSelectedTextRanges', {\n      documentID: this.#document.id,\n      revision,\n      ranges,\n    })\n  }\n\n  get #transformPixelToLogical() {\n    return this.#document.pixelKind === 'physical' ? physicalToLogicalPixel : identity\n  }\n\n  getGeometry(): AsyncResult<RemoteDocumentGeometryInfo> {\n    return pipe(\n      this.#connector.execute('getDocumentGeometry', { documentID: this.#document.id }),\n      AsyncResult.map(\n        response =>\n          ({\n            windowFrame: pipe(\n              Rect.create<'Screen'>(response.windowFrame),\n              Rect.map(this.#transformPixelToLogical),\n            ),\n            viewportFrame: pipe(\n              Rect.create<'Window'>(response.viewportFrame),\n              Rect.map(this.#transformPixelToLogical),\n            ),\n            documentFrame: pipe(\n              Rect.create<'Viewport'>(response.documentFrame),\n              Rect.map(this.#transformPixelToLogical),\n            ),\n            visibleTextRange: response.visibleTextRange ?? { start: 0, end: Infinity },\n            scrollPosition: response.documentScrollOffset\n              ? pipe(\n                  Point.create<'Content'>(response.documentScrollOffset),\n                  Point.map(this.#transformPixelToLogical),\n                )\n              : undefined,\n          }) satisfies RemoteDocumentGeometryInfo,\n      ),\n    )\n  }\n\n  getRectsForRanges<Id extends string>(\n    revision: TextRevision,\n    ranges: ReadonlyMap<Id, TextRange>,\n  ): AsyncResult<{\n    readonly rects: Map<Id, DocumentViewportRect[]>\n    readonly textRevision: TextRevision\n  }> {\n    if (ranges.size === 0) {\n      this.#logger.warn('getRectsForRanges() is called with an empty range map.')\n    }\n    return pipe(\n      this.#connector.execute('getBoundingBoxesForTextRanges', {\n        documentID: this.#document.id,\n        revision,\n        ranges: Object.fromEntries(ranges),\n      }),\n      AsyncResult.map(response => ({\n        rects: new Map<Id, DocumentViewportRect[]>(\n          pipe(\n            ranges.keys(), // using request ranges so we have response for all of them.\n            map(id => {\n              const boundingBoxes = response.boundingBoxes[id]\n              if (!boundingBoxes) {\n                this.#logger.warn(`No bounding box found for range with id: ${id}`)\n              }\n              return [\n                id,\n                (boundingBoxes ?? []).map(r =>\n                  pipe(Rect.create<'DocumentViewport'>(r), Rect.map(this.#transformPixelToLogical)),\n                ),\n              ] as const\n            }),\n          ),\n        ),\n        textRevision: TextRevision.create(response.revision),\n      })),\n    )\n  }\n\n  getBoundingRectForRanges<Id extends string>(\n    revision: TextRevision,\n    ranges: ReadonlyMap<Id, TextRange>,\n  ): AsyncResult<{\n    readonly rects: Map<Id, DocumentViewportRect>\n    readonly textRevision: TextRevision\n  }> {\n    if (ranges.size === 0) {\n      this.#logger.warn('getBoundingRectForRanges() is called with an empty range map.')\n    }\n    return pipe(\n      this.getRectsForRanges(revision, ranges),\n      AsyncResult.map(response => ({\n        rects: new Map(\n          pipe(\n            response.rects.entries(),\n            map(([id, rects]) => [\n              id,\n              pipe(\n                rects,\n                Rect.unionOrElse<'DocumentViewport'>(Rect.collapsed<'DocumentViewport'>()),\n              ),\n            ]),\n          ),\n        ),\n        textRevision: response.textRevision,\n      })),\n    )\n  }\n}\n\nfunction physicalToLogicalPixel(x: number): number {\n  return x / devicePixelRatio\n}\n","import { LRUCache } from '@grammarly/util-caching'\nimport type {\n  ConnectorInkwellInbound,\n  ConnectorInkwellOutbound,\n  DocumentDidDestroyRequest,\n  DocumentDidFocusRequest,\n  DocumentGeometryDidChangeRequest,\n  DocumentGeometryWillChangeRequest,\n  DocumentSelectedTextRangesDidChangeRequest,\n  DocumentTextDidChangeRequest,\n  HandshakeOptions,\n  HandshakeResponse,\n  InsertOperation,\n} from '@grammarly/util-connector-protocol'\nimport { Delta } from '@grammarly/util-delta'\nimport { getEnv } from '@grammarly/util-env-config'\nimport { CustomError } from '@grammarly/util-error'\nimport { pipe } from '@grammarly/util-function'\nimport { logger } from '@grammarly/util-logging'\nimport {\n  Emitter,\n  Rx,\n  State,\n  type Subscribable,\n  type SubscribableState,\n} from '@grammarly/util-reactive'\nimport { AsyncResult, Result } from '@grammarly/util-result'\nimport {\n  type RemoteFunctionExecutor,\n  type RemoteFunctionHandler,\n  type RemoteFunctionManager,\n} from '@grammarly/util-rpc'\nimport type { TextRevision } from '@grammarly/util-text'\nimport type { ConnectorConfiguration } from './ConnectorConfiguration'\nimport type {\n  ConnectorID,\n  ConnectorMessageTransportMetadata,\n  DefaultConnectorMessageTransport,\n} from './ConnectorMessageTransport'\nimport {\n  DefaultRemoteDocument,\n  DefaultRemoteDocumentData,\n  type DocumentID,\n  type RemoteDocument,\n  type RemoteDocumentData,\n} from './RemoteDocument'\n\nconst MAGIC_ENABLE_DEBUG_STRING = `ca77b3794901e345f5f1a3c5872169ec06411679: O Grammarly, O Grammarly, wherefore art thou open devtools? Deny thy debugger and refuse thy console.log; Or, if thou wilt not, be but sworn my love, And I'll no longer be a developer.`\n\n/**\n * Interface for connectors.\n * @public\n */\nexport interface ConnectorDocumentManager<Document = RemoteDocument> {\n  /**\n   * Fired after a document is created.\n   */\n  readonly onDocumentDidCreate: Subscribable<Document>\n\n  /**\n   * Fired before a document is destroyed.\n   */\n  readonly onDocumentWillDestroy: Subscribable<Document>\n\n  /**\n   * Fired when the secret debug signal is received.\n   */\n  readonly onDebugSignal: Subscribable<void>\n\n  /**\n   * Returns a document by its ID.\n   * @param documentID - ID of the document.\n   * @returns The document or `undefined` if the document is not available.\n   */\n  getRemoteDocument(documentID: DocumentID): Result<Document>\n}\n\n/** @internal */\nexport type ConnectorDocumentDataManager = ConnectorDocumentManager<RemoteDocumentData>\n\n/** @internal */\nexport class DefaultConnectorDocumentDataManager\n  implements ConnectorDocumentManager<RemoteDocumentData>, Disposable\n{\n  readonly #logger = logger.createLogger('ConnectorDocumentManager')\n  readonly #disposables = new DisposableStack()\n  readonly #connectorConfiguration: ConnectorConfiguration\n  readonly #documents = new LRUCache<DocumentID, DefaultRemoteDocumentData>({ capacity: 10 })\n  readonly #onDocumentDidCreate = this.#disposables.use(new Emitter<RemoteDocumentData>())\n  readonly #onDocumentWillDestroy = this.#disposables.use(new Emitter<RemoteDocumentData>())\n  readonly #onDebugSignal = this.#disposables.use(new Emitter<void>())\n  readonly #connectionIdToHandshakeOptionsMap = new Map<ConnectorID, HandshakeOptions>()\n  readonly #protocolVersion = 0\n  readonly #lastActiveDocumentConnectionId = this.#disposables.use(\n    new State<ConnectorID | null>(null),\n  )\n  readonly #documentDidFocusRequest = new Rx.BehaviorSubject<{\n    /** The connection-id on which the focus/unfocus happened */\n    readonly connectionId: ConnectorID\n    /** The focused document id or null for unfocus */\n    readonly documentId: DocumentID | null\n  } | null>(null)\n\n  #focusedDocument: DefaultRemoteDocumentData | null = null\n\n  readonly onDocumentDidCreate: Subscribable<RemoteDocumentData> = this.#onDocumentDidCreate\n  readonly onDocumentWillDestroy: Subscribable<RemoteDocumentData> = this.#onDocumentWillDestroy\n  readonly onDebugSignal: Subscribable<void> = this.#onDebugSignal\n  readonly lastActiveDocumentConnectionId: SubscribableState<ConnectorID | null> =\n    this.#lastActiveDocumentConnectionId\n\n  readonly handler: RemoteFunctionHandler<\n    ConnectorInkwellInbound,\n    ConnectorMessageTransportMetadata\n  > = {\n    echo: message => AsyncResult.success(message),\n    // TODO: support cancellation of requests.\n    cancel: () => AsyncResult.success(),\n    documentDidDestroy: async message => this.#handleDocumentDidDestroy(message),\n    documentDidFocus: (message, metadata) =>\n      this.#handleDocumentDidFocus(\n        metadata.connectorId,\n        message,\n        this.#connectionIdToHandshakeOptionsMap.get(metadata.connectorId) ?? {},\n      ),\n\n    documentGeometryDidChange: async (message, metadata) =>\n      this.#handleDocumentGeometryDidChange(metadata.connectorId, message),\n\n    documentSelectedTextRangesDidChange: async (message, metadata) =>\n      this.#handleDocumentSelectedTextRangesDidChange(metadata.connectorId, message),\n    documentTextDidChange: async (message, metadata) =>\n      this.#handleDocumentTextDidChange(metadata.connectorId, message),\n    documentGeometryWillChange: async (message, metadata) =>\n      this.#handleDocumentGeometryWillChange(metadata.connectorId, message),\n    handshake: async (message, metadata) => {\n      if (metadata) {\n        this.#connectionIdToHandshakeOptionsMap.set(metadata.connectorId, message.options)\n      }\n\n      if (message.protocolVersion !== this.#protocolVersion) {\n        return AsyncResult.failure(\n          new UnsupportedProtocolVersionError({\n            protocolVersion: message.protocolVersion,\n            expectedProtocolVersion: this.#protocolVersion,\n          }),\n        )\n      }\n\n      const env = getEnv()\n      const response: HandshakeResponse = {\n        client: env.name,\n        version: env.version,\n        protocolVersion: this.#protocolVersion,\n        options: {\n          nonce: await this.#connectorConfiguration.getNonce(),\n          pixelKind: message.options.pixelKind,\n        },\n      }\n\n      return AsyncResult.success(response)\n    },\n  }\n\n  constructor(\n    configuration: ConnectorConfiguration,\n    transport: Pick<DefaultConnectorMessageTransport, 'connectionTimedOut'>,\n  ) {\n    this.#connectorConfiguration = configuration\n    using disposables = new DisposableStack()\n\n    // Handle connection timeout.\n    // If no other message is being sent over the Connector, there should be a regular \"echo\" that\n    // keeps the connection alive. When we don't receive anything for some time,\n    // we consider the connection dead and unfocus the active document.\n    disposables.use(\n      pipe(\n        this.#documentDidFocusRequest,\n        // Emit null we we receive \"unfocus\" to unsubscribe the switchMap\n        Rx.map(focus => (focus && focus.documentId !== null ? focus.connectionId : null)),\n        Rx.switchMap(connectionId =>\n          connectionId === null\n            ? Rx.EMPTY\n            : pipe(\n                Rx.fromSubscribable(\n                  transport.connectionTimedOut(connectionId, configuration.connectorTimeoutMs),\n                ),\n                Rx.map(() => connectionId),\n              ),\n        ),\n        Rx.subscribe(connectionId => this.#handleDocumentDidFocus(connectionId, null, {})),\n      ),\n    )\n\n    this.#disposables.defer(() => this.#documents.clear())\n    this.#disposables.use(disposables.move())\n  }\n\n  [Symbol.dispose]() {\n    this.#disposables.dispose()\n  }\n\n  getRemoteDocument(documentID: DocumentID) {\n    const document = this.#documents.get(documentID)\n    if (document) return Result.success(document)\n    return Result.failure(new DocumentNotFoundError(documentID))\n  }\n\n  #removeRemoteDocument(documentId: DocumentID): Result<void> {\n    if (this.#focusedDocument?.id === documentId) {\n      this.#focusedDocument = null\n    }\n    const document = this.#documents.get(documentId)\n    if (!document) return Result.failure(new DocumentNotFoundError(documentId))\n    this.#documents.delete(documentId)\n    this.#onDocumentWillDestroy.emit(document)\n    return Result.success()\n  }\n\n  #handleDocumentGeometryWillChange(\n    _connectionId: ConnectorID,\n    request: DocumentGeometryWillChangeRequest,\n  ) {\n    const document = this.#getDocument(request.documentID)\n    if (!document) {\n      return Result.failure(new DocumentNotFoundError(request.documentID as DocumentID))\n    }\n\n    document.geometryWillChange.next(new Set(request.reasons))\n\n    return Result.success()\n  }\n\n  #handleDocumentTextDidChange(_connectionId: ConnectorID, request: DocumentTextDidChangeRequest) {\n    const document = this.#getDocument(request.documentID)\n    if (!document) {\n      return Result.failure(new DocumentNotFoundError(request.documentID as DocumentID))\n    }\n\n    const op = request.changes.ops.find(\n      (op): op is InsertOperation => 'insert' in op && typeof op.insert === 'string',\n    )\n\n    if (op && String(op.insert).includes(MAGIC_ENABLE_DEBUG_STRING)) {\n      this.#onDebugSignal.emit()\n    }\n\n    document.textDidChange.next({\n      revision: request.revision as TextRevision,\n      change: new Delta(request.changes.ops),\n    })\n\n    return Result.success()\n  }\n\n  #handleDocumentSelectedTextRangesDidChange(\n    _connectionId: ConnectorID,\n    request: DocumentSelectedTextRangesDidChangeRequest,\n  ) {\n    const document = this.#getDocument(request.documentID)\n    if (!document) {\n      return Result.failure(new DocumentNotFoundError(request.documentID as DocumentID))\n    }\n\n    document.selectionDidChange.next(request.ranges)\n\n    return Result.success()\n  }\n\n  #handleDocumentGeometryDidChange(\n    _connectionId: ConnectorID,\n    request: DocumentGeometryDidChangeRequest,\n  ) {\n    const document = this.#getDocument(request.documentID)\n    if (!document) {\n      return Result.failure(new DocumentNotFoundError(request.documentID as DocumentID))\n    }\n\n    document.geometryDidChange.next(new Set(request.reasons))\n\n    return Result.success()\n  }\n\n  #handleDocumentDidFocus(\n    connectionId: ConnectorID,\n    request: DocumentDidFocusRequest | null,\n    options: HandshakeOptions,\n  ) {\n    const documentId = request ? (request.documentID as DocumentID) : null\n    this.#documentDidFocusRequest.next({ connectionId, documentId })\n\n    if (documentId === null) {\n      if (this.#focusedDocument !== null) {\n        this.#focusedDocument.hasFocusState.next(false)\n        this.#logger.verbose({ context: this.#focusedDocument.id }, 'Document blurred')\n        this.#focusedDocument = null\n      }\n\n      return AsyncResult.success() // No document to focus.\n    }\n\n    this.#lastActiveDocumentConnectionId.setValue(connectionId)\n\n    const document =\n      this.#documents.get(documentId) ?? this.#createDocument(connectionId, documentId, options)\n\n    if (this.#focusedDocument !== null && document.id !== this.#focusedDocument.id) {\n      this.#logger.verbose({ context: this.#focusedDocument.id }, 'Document blurred')\n      this.#focusedDocument.hasFocusState.next(false)\n    }\n\n    this.#focusedDocument = document\n    document.hasFocusState.next(true)\n    this.#logger.verbose({ context: document.id }, 'Document focused')\n    return AsyncResult.success()\n  }\n\n  #handleDocumentDidDestroy(request: DocumentDidDestroyRequest) {\n    return this.#removeRemoteDocument(request.documentID as DocumentID)\n  }\n\n  #getDocument(documentId: string) {\n    return this.#documents.get(documentId as DocumentID)\n  }\n\n  #createDocument(connectionId: ConnectorID, documentId: DocumentID, options: HandshakeOptions) {\n    this.#logger.verbose({ context: documentId }, 'Document created')\n    const document = this.#disposables.use(\n      new DefaultRemoteDocumentData(connectionId, documentId, options),\n    )\n    this.#documents.set(documentId, document)\n    // Move the emit to the microtask queue to ensure that the document is fully initialized\n    // before notifying the listeners.\n    queueMicrotask(() => this.#onDocumentDidCreate.emit(document))\n    return document\n  }\n}\n\n/** @internal */\nexport class DefaultConnectorDocumentManager implements ConnectorDocumentManager<RemoteDocument> {\n  readonly #documentManager: ConnectorDocumentManager<RemoteDocumentData>\n  readonly #connector: RemoteFunctionExecutor<ConnectorInkwellOutbound>\n\n  constructor(\n    documentManager: ConnectorDocumentManager<RemoteDocumentData>,\n    rpc: RemoteFunctionManager<ConnectorInkwellOutbound>,\n  ) {\n    this.#documentManager = documentManager\n    this.#connector = rpc.createClient<ConnectorInkwellOutbound>()\n  }\n\n  get onDebugSignal() {\n    return this.#documentManager.onDebugSignal\n  }\n\n  get onDocumentDidCreate() {\n    return pipe(\n      Rx.fromSubscribable(this.#documentManager.onDocumentDidCreate),\n      Rx.map(documentData => new DefaultRemoteDocument(documentData, this.#connector)),\n      Rx.toSubscribable,\n    )\n  }\n\n  get onDocumentWillDestroy() {\n    return pipe(\n      Rx.fromSubscribable(this.#documentManager.onDocumentWillDestroy),\n      Rx.map(documentData => new DefaultRemoteDocument(documentData, this.#connector)),\n      Rx.toSubscribable,\n    )\n  }\n\n  getRemoteDocument(documentID: DocumentID): Result<RemoteDocument> {\n    return pipe(\n      this.#documentManager.getRemoteDocument(documentID),\n      Result.map(documentData => new DefaultRemoteDocument(documentData, this.#connector)),\n    )\n  }\n}\n\n/** @internal */\nexport class DocumentNotFoundError extends CustomError {\n  constructor(readonly documentId: DocumentID) {\n    super('Document not found')\n  }\n\n  override toJSON() {\n    return {\n      ...super.toJSON(),\n      documentId: this.documentId,\n    }\n  }\n}\n\nclass UnsupportedProtocolVersionError extends CustomError {\n  readonly protocolVersion: number\n  readonly expectedProtocolVersion: number\n\n  constructor(options: {\n    readonly protocolVersion: number\n    readonly expectedProtocolVersion: number\n  }) {\n    super('Unsupported protocol version')\n    this.protocolVersion = options.protocolVersion\n    this.expectedProtocolVersion = options.expectedProtocolVersion\n  }\n\n  override toJSON() {\n    return {\n      ...super.toJSON(),\n      protocolVersion: this.protocolVersion,\n      expectedProtocolVersion: this.expectedProtocolVersion,\n    }\n  }\n}\n","import { pipe } from '@grammarly/util-function'\nimport { Rx, type Subscribable } from '@grammarly/util-reactive'\nimport type { AsyncResult } from '@grammarly/util-result'\nimport type { MessageTransport, RPCMessage } from '@grammarly/util-rpc'\n\n/**\n * Opaque unique identifier for a connector connection.\n * @public\n */\nexport type ConnectorID = string & { readonly __ConnectorID: unique symbol }\n\n/**\n * Additional metadata associated with a message transport.\n * @public\n */\nexport interface ConnectorMessageTransportMetadata {\n  /** A unique identifier for the connection. */\n  readonly connectorId: ConnectorID\n}\n\n/**\n * The message transport for a connector.\n * @public\n */\nexport interface ConnectorMessageTransport\n  extends MessageTransport<ConnectorMessageTransportMetadata> {}\n\nconst CONNECTOR_CONNECTION_TIMEOUT_MS = 4_000 // Time interval between consecutive echos.\nconst CONNECTOR_CONNECTION_TIMEOUT_BUFFER_MS = 1000\n\nexport class DefaultConnectorMessageTransport implements ConnectorMessageTransport {\n  readonly #transport: ConnectorMessageTransport\n  readonly #lastMessageConnectorId = new Rx.Subject<ConnectorID>()\n\n  constructor(transport: ConnectorMessageTransport) {\n    this.#transport = transport\n  }\n\n  /**\n   * A subscribable that emits once when the given connection times out.\n   * @param connectorId\n   * @returns\n   */\n  connectionTimedOut(\n    connectorId: ConnectorID,\n    timeoutMs = CONNECTOR_CONNECTION_TIMEOUT_MS + CONNECTOR_CONNECTION_TIMEOUT_BUFFER_MS,\n  ): Subscribable<void> {\n    return pipe(\n      this.#lastMessageConnectorId,\n      Rx.filter(id => id === connectorId),\n      Rx.debounceTime(timeoutMs),\n      Rx.map(() => undefined),\n      Rx.take(1),\n      Rx.toSubscribable,\n    )\n  }\n\n  onMessage(\n    receive: (message: RPCMessage, metadata: ConnectorMessageTransportMetadata) => void,\n  ): Disposable {\n    const handle = (message: RPCMessage, metadata: ConnectorMessageTransportMetadata) => {\n      receive(message, metadata)\n      this.#lastMessageConnectorId.next(metadata.connectorId)\n    }\n\n    return this.#transport.onMessage(handle)\n  }\n\n  sendMessage(message: RPCMessage): AsyncResult<void> {\n    return this.#transport.sendMessage(message)\n  }\n}\n","import { asFeatureDependency } from '@grammarly/feature'\nimport { createInjectionToken } from '@grammarly/util-dependency-container'\nimport type { ConnectorConfiguration } from './ConnectorConfiguration'\nimport type { ConnectorMessageTransport } from './ConnectorMessageTransport'\n\n/**\n * A named injection token for the transport of the connector.\n * @public\n * @remarks\n * This token must by provided by the application.\n */\nexport const ConnectorMessageTransportToken = asFeatureDependency(\n  createInjectionToken<ConnectorMessageTransport>(Symbol('ConnectorMessageTransport')),\n)\n\n/**\n * A named injection token for the configuration of the connector.\n * @public\n */\nexport const ConnectorConfigurationToken = asFeatureDependency(\n  createInjectionToken<ConnectorConfiguration>(Symbol('ConnectorConfiguration')),\n)\n","import type { EventMessageId, RemoveEvent } from '@grammarly/util-capi-protocol'\nimport {\n  type ConnectorInkwellInboundCAPI,\n  type ConnectorInkwellOutboundCAPI,\n  type CAPIConnectedRequest,\n  type CAPIDisconnectedRequest,\n  type CAPIMessageReceivedRequest,\n  type CAPITextRevisionRequest,\n  type SendCAPIMessageRequest,\n} from '@grammarly/util-connector-protocol'\nimport { CustomError } from '@grammarly/util-error'\nimport { pipe } from '@grammarly/util-function'\nimport { logger } from '@grammarly/util-logging'\nimport { Rx, type Subscribable } from '@grammarly/util-reactive'\nimport { AsyncResult, Result } from '@grammarly/util-result'\nimport type {\n  RemoteFunctionExecutor,\n  RemoteFunctionHandler,\n  RemoteFunctionManager,\n} from '@grammarly/util-rpc'\nimport { type ConnectorDocumentDataManager } from '../ConnectorDocumentManager'\nimport type { DocumentID } from '../RemoteDocument'\n\nexport type {\n  CAPIConnectedRequest,\n  CAPIDisconnectedRequest,\n  CAPIMessageReceivedRequest,\n} from '@grammarly/util-connector-protocol'\n\n/**\n * Events emitted by the ConnectorCAPI.\n * @public\n */\nexport type ConnectorCAPIMessage =\n  | {\n      readonly kind: 'connected'\n      readonly message: CAPIConnectedRequest\n    }\n  | {\n      readonly kind: 'disconnected'\n      readonly message: CAPIDisconnectedRequest\n    }\n  | {\n      readonly kind: 'messageReceived'\n      readonly message: CAPIMessageReceivedRequest\n    }\n  | {\n      readonly kind: 'textRevision'\n      readonly message: CAPITextRevisionRequest\n    }\n\n/**\n * @public\n */\nexport interface ConnectorCAPIMessageProvider {\n  readonly onMessage: Subscribable<ConnectorCAPIMessage>\n}\n\n/**\n * Connector CAPI.\n * @public\n */\nexport interface ConnectorCAPI extends ConnectorCAPIMessageProvider {\n  send(request: SendCAPIMessageRequest): AsyncResult<void>\n}\n\n/**\n * Implements {@link ConnectorCAPIMessageProvider} and exposes {@link CapiClient} handlers for RPC.\n * @internal\n */\nexport class DefaultConnectorCAPIRemoteFunctionHandler\n  implements ConnectorCAPIMessageProvider, Disposable\n{\n  readonly #disposables = new DisposableStack()\n  readonly #onMessage = new Rx.Subject<ConnectorCAPIMessage>()\n  readonly #capiSessions = new Set<string>()\n  readonly #logger = logger.createLogger('ConnectorCAPI')\n  readonly #manager: ConnectorDocumentDataManager\n\n  readonly onMessage = Rx.toSubscribable(this.#onMessage)\n\n  readonly handler: RemoteFunctionHandler<ConnectorInkwellInboundCAPI> = {\n    capiConnected: async request =>\n      pipe(\n        this.#manager.getRemoteDocument(request.documentID as DocumentID),\n        Result.map(() => {\n          this.#capiSessions.add(request.sessionID)\n          this.#onMessage.next({ kind: 'connected', message: request })\n        }),\n      ),\n    capiDisconnected: async request =>\n      pipe(\n        this.#manager.getRemoteDocument(request.documentID as DocumentID),\n        Result.map(() => {\n          this.#capiSessions.delete(request.sessionID)\n          this.#onMessage.next({ kind: 'disconnected', message: request })\n        }),\n      ),\n    capiMessageReceived: async request =>\n      pipe(\n        this.#manager.getRemoteDocument(request.documentID as DocumentID),\n        Result.map(() => this.#onMessage.next({ kind: 'messageReceived', message: request })),\n      ),\n    capiAlertRemoved: async request =>\n      pipe(\n        this.#manager.getRemoteDocument(request.documentID as DocumentID),\n        Result.flatMap(() => {\n          if (this.#capiSessions.has(request.sessionID)) {\n            return Result.success(\n              this.#onMessage.next({\n                kind: 'messageReceived',\n                message: {\n                  documentID: request.documentID,\n                  sessionID: request.sessionID,\n                  message: {\n                    id: parseInt(request.alertID) as EventMessageId,\n                    action: 'remove',\n                  } satisfies RemoveEvent,\n                },\n              }),\n            )\n          } else {\n            this.#logger.warn(\n              `Received capiAlertRemoved for disconnected session ${request.sessionID}`,\n            )\n            return Result.failure(new UnknownSessionError(request.sessionID))\n          }\n        }),\n      ),\n    capiTextRevision: request =>\n      AsyncResult.success(this.#onMessage.next({ kind: 'textRevision', message: request })),\n  }\n\n  constructor(manager: ConnectorDocumentDataManager) {\n    this.#manager = manager\n    this.#disposables.defer(() => this.#onMessage.complete())\n  }\n\n  [Symbol.dispose]() {\n    this.#disposables.dispose()\n  }\n}\n\n/** @internal */\nexport class DefaultConnectorCAPI implements ConnectorCAPI {\n  readonly #client: RemoteFunctionExecutor<ConnectorInkwellOutboundCAPI>\n\n  readonly onMessage: Subscribable<ConnectorCAPIMessage>\n\n  constructor(\n    rpc: RemoteFunctionManager<ConnectorInkwellOutboundCAPI>,\n    capiMessageProvider: ConnectorCAPIMessageProvider,\n  ) {\n    this.onMessage = capiMessageProvider.onMessage\n    this.#client = rpc.createClient<ConnectorInkwellOutboundCAPI>()\n  }\n\n  send(request: SendCAPIMessageRequest) {\n    return this.#client.execute('sendCAPIMessage', request)\n  }\n}\n\nclass UnknownSessionError extends CustomError {\n  constructor(readonly sessionId: string) {\n    super('Unknown CAPI session ID')\n  }\n\n  override toJSON() {\n    return { ...super.toJSON(), sessionId: this.sessionId }\n  }\n}\n","import { AsyncResult } from '@grammarly/util-result'\nimport type { RemoteFunctionExecutor, RemoteFunctionManager } from '@grammarly/util-rpc'\nimport type {\n  ConnectorInkwellOutboundExperimentation,\n  ExperimentationRequest,\n  ExperimentationResponse,\n} from '@grammarly/util-connector-protocol'\n\n/**\n * Temporary interface to invoke Experimentation HTTP requests on Llama.\n * @public\n * See {@link https://docs.google.com/document/d/1EzxOIsRCQdeBwIKzMaG4P6OBnP-L1sykh32PNOn77u8/edit#heading=h.d4z2lu6o167i | temporary Connector API extensions}.\n */\nexport interface ConnectorExperimentation {\n  makeExperimentationRequest(req: ExperimentationRequest): AsyncResult<ExperimentationResponse>\n}\n\nexport class DefaultConnectorExperimentation implements ConnectorExperimentation {\n  readonly #client: RemoteFunctionExecutor<ConnectorInkwellOutboundExperimentation>\n\n  constructor(rpc: RemoteFunctionManager<ConnectorInkwellOutboundExperimentation>) {\n    this.#client = rpc.createClient<ConnectorInkwellOutboundExperimentation>()\n  }\n\n  makeExperimentationRequest(req: ExperimentationRequest): AsyncResult<ExperimentationResponse> {\n    return this.#client.execute('makeExperimentationRequest', req)\n  }\n}\n\n/**\n * Temporary interface to invoke Experimentation HTTP requests on Llama.\n * @public\n * See {@link https://docs.google.com/document/d/1EzxOIsRCQdeBwIKzMaG4P6OBnP-L1sykh32PNOn77u8/edit#heading=h.d4z2lu6o167i | temporary Connector API extensions}.\n */\nexport interface ConnectorExperimentation {\n  makeExperimentationRequest(req: ExperimentationRequest): AsyncResult<ExperimentationResponse>\n}\n","import {\n  type ConnectorInkwellInboundTextDecoration,\n  type ConnectorInkwellOutboundTextDecoration,\n  type TextDecorationInteractionRequest,\n  type TextDecorationVisibilityInfo,\n  type TextDecorationVisibilityRequest,\n} from '@grammarly/util-connector-protocol'\nimport { pipe } from '@grammarly/util-function'\nimport { Point, Rect } from '@grammarly/util-geometry'\nimport { Rx, type Subscribable } from '@grammarly/util-reactive'\nimport { AsyncResult, Result } from '@grammarly/util-result'\nimport type {\n  RemoteFunctionExecutor,\n  RemoteFunctionHandler,\n  RemoteFunctionManager,\n} from '@grammarly/util-rpc'\nimport type { ConnectorDocumentDataManager } from '../ConnectorDocumentManager'\nimport type { DocumentID } from '../RemoteDocument'\n\nexport type {\n  TextDecorationInteractionRequest,\n  TextDecorationVisibilityRequest,\n} from '@grammarly/util-connector-protocol'\n\n/**\n * Connector Text Decoration Visibility.\n * @public\n */\nexport interface ConnectorTextDecorationVisibilityProvider {\n  onSetTextDecorationVisibility(\n    documentId: DocumentID,\n  ): Subscribable<TextDecorationVisibilityRequest>\n}\n\n/**\n * Connector Text Decoration Interaction.\n * @public\n */\nexport interface ConnectorTextDecorationInteractionClient {\n  notifyTextDecorationInteraction(request: TextDecorationInteractionRequest): AsyncResult<void>\n}\n\n/**\n * Connector Text Decorations.\n * @public\n */\nexport interface ConnectorTextDecoration\n  extends ConnectorTextDecorationVisibilityProvider,\n    ConnectorTextDecorationInteractionClient {}\n\ntype AlertId = string\n\nexport class DefaultConnectorTextDecorationRemoteFunctionHandler\n  implements ConnectorTextDecorationVisibilityProvider, Disposable\n{\n  readonly #disposables = new DisposableStack()\n  readonly #onSetTextDecorationVisibility = new Rx.Subject<TextDecorationVisibilityRequest>()\n  readonly #manager: ConnectorDocumentDataManager\n  readonly #visibilityState = new Map<DocumentID, Map<AlertId, TextDecorationVisibilityInfo>>()\n\n  readonly handlers: RemoteFunctionHandler<ConnectorInkwellInboundTextDecoration> = {\n    setTextDecorationVisibility: async request =>\n      pipe(\n        this.#manager.getRemoteDocument(request.documentID as DocumentID),\n        Result.map(document => {\n          let state = this.#visibilityState.get(document.id)\n          if (!state) {\n            state = new Map<AlertId, TextDecorationVisibilityInfo>()\n            this.#visibilityState.set(document.id, state)\n          }\n\n          if (!request.partial) state.clear()\n          request.changes.forEach(change => {\n            if (change.visibility === 'hidden') {\n              state.delete(change.alertId)\n            } else {\n              state.set(change.alertId, change)\n            }\n          })\n\n          this.#onSetTextDecorationVisibility.next(request)\n        }),\n      ),\n  }\n\n  constructor(manager: ConnectorDocumentDataManager) {\n    this.#manager = manager\n    this.#disposables.use(\n      manager.onDocumentWillDestroy.subscribe(document => {\n        this.#visibilityState.delete(document.id)\n      }),\n    )\n    this.#disposables.defer(() => this.#onSetTextDecorationVisibility.complete())\n  }\n\n  onSetTextDecorationVisibility(\n    documentId: DocumentID,\n  ): Subscribable<TextDecorationVisibilityRequest> {\n    return pipe(\n      Rx.concat(\n        // Replay state on subscription if it exists\n        Rx.defer(() => {\n          const state =\n            this.#visibilityState.get(documentId) ??\n            new Map<AlertId, TextDecorationVisibilityInfo>()\n          return state.size > 0\n            ? Rx.of({\n                documentId,\n                partial: false,\n                changes: Array.from(state.values()),\n              })\n            : Rx.EMPTY\n        }),\n        // Follow with live visibility changes\n        pipe(\n          this.#onSetTextDecorationVisibility,\n          Rx.filter(request => request.documentID === documentId),\n        ),\n      ),\n      Rx.toSubscribable,\n    )\n  }\n\n  [Symbol.dispose]() {\n    this.#disposables.dispose()\n  }\n}\n\n/** @internal */\nexport class DefaultConnectorTextDecoration implements ConnectorTextDecoration {\n  readonly #client: RemoteFunctionExecutor<ConnectorInkwellOutboundTextDecoration>\n  readonly #manager: ConnectorDocumentDataManager\n  readonly #connectorTextDecorationVisibilityProvider: ConnectorTextDecorationVisibilityProvider\n\n  constructor(\n    rpc: RemoteFunctionManager<ConnectorInkwellOutboundTextDecoration>,\n    manager: ConnectorDocumentDataManager,\n    connectorTextDecorationVisibilityProvider: ConnectorTextDecorationVisibilityProvider,\n  ) {\n    this.#client = rpc.createClient<ConnectorInkwellOutboundTextDecoration>()\n    this.#manager = manager\n    this.#connectorTextDecorationVisibilityProvider = connectorTextDecorationVisibilityProvider\n  }\n\n  onSetTextDecorationVisibility(documentId: DocumentID) {\n    return this.#connectorTextDecorationVisibilityProvider.onSetTextDecorationVisibility(documentId)\n  }\n\n  notifyTextDecorationInteraction(request: TextDecorationInteractionRequest): AsyncResult<void> {\n    return pipe(\n      this.#manager.getRemoteDocument(request.documentID as DocumentID),\n      AsyncResult.fromResult,\n      AsyncResult.flatMap(document =>\n        this.#client.execute(\n          'handleTextDecorationInteraction',\n\n          document.pixelKind === 'logical'\n            ? request\n            : {\n                ...request,\n                position: pipe(Point.create(request.position), Point.map(logicalToPhysicalPixel)),\n                rect: pipe(Rect.create(request.rect), Rect.map(logicalToPhysicalPixel)),\n                decorationRects: request.decorationRects.map(rect =>\n                  pipe(Rect.create(rect), Rect.map(logicalToPhysicalPixel)),\n                ),\n              },\n        ),\n      ),\n    )\n  }\n}\n\nfunction logicalToPhysicalPixel(x: number): number {\n  return x * devicePixelRatio\n}\n","/**\n * This feature implements the connector protocol as defined in https://docs.google.com/document/d/1b6jMknwTjQi3NzDm5XAR_1gCovvlI8HPEZbj-cnIyM0\n * @packageDocumentation\n */\n\nimport type {\n  Activate,\n  ExecutionScopeDefinition,\n  Feature,\n  FeatureContext,\n} from '@grammarly/feature'\nimport { CAPIProviderToken } from '@grammarly/util-capi-client'\nimport type * as Protocols from '@grammarly/util-connector-protocol'\nimport { createInjectionToken, defineFactory, Lifetime } from '@grammarly/util-dependency-container'\nimport { createDisposable, dispose } from '@grammarly/util-disposable'\nimport { constVoid, isNonNullable, pipe } from '@grammarly/util-function'\nimport { logger } from '@grammarly/util-logging'\nimport { Rx } from '@grammarly/util-reactive'\nimport { AsyncResult, Result, ResultDisposable } from '@grammarly/util-result'\nimport { DefaultRemoteFunctionManager, type RemoteFunctionManager } from '@grammarly/util-rpc'\nimport { RandomUserSampler } from '@grammarly/util-sampling'\nimport { BufferedConnectorCAPI } from './capi/BufferedConnectorCAPI'\nimport { PerDocumentCAPITransportFactory } from './capi/PerDocumentCAPITransportFactory'\nimport {\n  DefaultConnectorDocumentDataManager,\n  DefaultConnectorDocumentManager,\n  type ConnectorDocumentManager,\n} from './ConnectorDocumentManager'\nimport {\n  DefaultConnectorMessageTransport,\n  type ConnectorMessageTransportMetadata,\n} from './ConnectorMessageTransport'\nimport { ConnectorConfigurationToken, ConnectorMessageTransportToken } from './dependencies'\nimport {\n  DefaultConnectorCAPI,\n  DefaultConnectorCAPIRemoteFunctionHandler,\n  type ConnectorCAPI,\n} from './extensions/ConnectorCAPI'\nimport {\n  DefaultConnectorExperimentation,\n  type ConnectorExperimentation,\n} from './extensions/ConnectorExperimentation'\nimport {\n  DefaultConnectorTextDecoration,\n  DefaultConnectorTextDecorationRemoteFunctionHandler,\n  type ConnectorTextDecoration,\n} from './extensions/ConnectorTextDecoration'\nimport type { DocumentID } from './RemoteDocument'\n\nimport type {} from '@grammarly/feature-monitoring'\nimport type {} from '@grammarly/feature-performance-hud'\n\n/**\n * A document hosted by a connector.\n * @public\n */\nexport const ConnectorDocumentManagerToken = createInjectionToken<ConnectorDocumentManager>(\n  Symbol('ConnectorDocumentManager'),\n)\n\n/**\n * {@inheritdoc ConnectorExperimentation}\n * @public\n */\nexport const ConnectorExperimentationToken = createInjectionToken<ConnectorExperimentation>(\n  Symbol('ConnectorExperimentation'),\n)\n\n/**\n * {@inheritdoc ConnectorCAPI}\n * @public\n */\nexport const ConnectorCAPIToken = createInjectionToken<ConnectorCAPI>(Symbol('ConnectorCAPI'))\n\n/**\n * {@inheritdoc ConnectorTextDecoration}\n * @public\n */\nexport const ConnectorTextDecorationToken = createInjectionToken<ConnectorTextDecoration>(\n  Symbol('ConnectorTextDecoration'),\n)\n\n/**\n * Set of methods the host can call on Inkwell (host pushes data to Inkwell)\n * @public\n */\nexport type ConnectorInkwellInbound = Protocols.ConnectorInkwellInbound &\n  Protocols.ConnectorInkwellInboundCAPI &\n  Protocols.ConnectorInkwellInboundTextDecoration\n\n// TODO: It's confusing for ConnectorInkwellOutbound name to refer to two different things\n// We should rename one of them, probably the one defined here.\n/**\n * Set of methods Inkwell can call on the host (Inkwell pushes data to host)\n * @public\n */\nexport type ConnectorInkwellOutbound = Protocols.ConnectorInkwellOutbound &\n  Protocols.ConnectorInkwellOutboundCAPI &\n  Protocols.ConnectorInkwellOutboundTextDecoration &\n  Protocols.ConnectorInkwellOutboundExperimentation\n\n/**\n * Client for Connector RPC communication.\n * @public\n */\nexport type ConnectorRemoteFunctionManager = RemoteFunctionManager<ConnectorInkwellOutbound>\n\n/** @internal */\nconst RemoteFunctionManagerToken = createInjectionToken<ConnectorRemoteFunctionManager>(\n  Symbol('RemoteFunctionManager'),\n)\n\n/** @public */\nexport const activate: Activate = context =>\n  pipe(\n    Result.all([context.getExecutionScope('global'), context.getFeature('monitoring')] as const),\n    Result.flatMap(([scope, monitoringFeature]) =>\n      ResultDisposable.all([\n        ...registerConnectorHandlerDependencies(scope),\n        ...registerRPCDependencies(scope, monitoringFeature),\n        ...registerConnectorDependencies(scope),\n        initializeConnectorsOnGlobalScopeStart(scope),\n        injectConnectorStatusInHUDOnGlobalScopeStart(scope, context),\n      ]),\n    ),\n  )\n\nfunction registerConnectorHandlerDependencies(\n  scope: ExecutionScopeDefinition<'global'>,\n): ResultDisposable[] {\n  return [\n    scope.register(\n      {\n        token: DefaultConnectorDocumentDataManager,\n        useFactory: defineFactory(DefaultConnectorDocumentDataManager, [\n          ConnectorConfigurationToken,\n          DefaultConnectorMessageTransport,\n        ]),\n      },\n      { lifetime: Lifetime.Singleton },\n    ),\n    scope.register(\n      {\n        token: DefaultConnectorCAPIRemoteFunctionHandler,\n        useFactory: defineFactory(DefaultConnectorCAPIRemoteFunctionHandler, [\n          DefaultConnectorDocumentDataManager,\n        ]),\n      },\n      { lifetime: Lifetime.Singleton },\n    ),\n    scope.register(\n      {\n        token: DefaultConnectorTextDecorationRemoteFunctionHandler,\n        useFactory: defineFactory(DefaultConnectorTextDecorationRemoteFunctionHandler, [\n          DefaultConnectorDocumentDataManager,\n        ]),\n      },\n      { lifetime: Lifetime.Singleton },\n    ),\n  ]\n}\n\nfunction registerRPCDependencies(\n  scope: ExecutionScopeDefinition<'global'>,\n  monitoringFeature: Feature<'monitoring'>,\n): ResultDisposable[] {\n  return [\n    scope.register(\n      {\n        token: DefaultConnectorMessageTransport,\n        useFactory: context =>\n          pipe(\n            context.resolve(ConnectorMessageTransportToken),\n            Result.map(transport => new DefaultConnectorMessageTransport(transport)),\n          ),\n      },\n      { lifetime: Lifetime.Singleton },\n    ),\n    scope.register(\n      {\n        token: RemoteFunctionManagerToken,\n        useFactory: resolver =>\n          pipe(\n            Result.all([\n              resolver.resolve(DefaultConnectorMessageTransport),\n              resolver.resolve(DefaultConnectorDocumentDataManager),\n              resolver.resolve(DefaultConnectorCAPIRemoteFunctionHandler),\n              resolver.resolve(DefaultConnectorTextDecorationRemoteFunctionHandler),\n              resolver.resolve(monitoringFeature.provides.Monitoring),\n            ] as const),\n            Result.map(\n              ([transport, connector, capiConnector, textDecorationConnector, monitoring]) => {\n                const sampler = new RandomUserSampler({ probability: 0.01 })\n\n                return new DefaultRemoteFunctionManager<\n                  ConnectorInkwellInbound,\n                  ConnectorInkwellOutbound,\n                  ConnectorMessageTransportMetadata\n                >(transport, {\n                  label: 'RPC/Connector',\n                  handler: {\n                    ...connector.handler,\n                    ...capiConnector.handler,\n                    ...textDecorationConnector.handlers,\n                  },\n                  report:\n                    monitoring && sampler.shouldSelect()\n                      ? request =>\n                          monitoring\n                            .duration(`${request.kind}_rpc_call`, {\n                              labels: { rpc_method_name: request.action },\n                            })\n                            .close(request.error, {\n                              durationInSeconds: request.durationInMs / 1000,\n                            })\n                      : undefined,\n                })\n              },\n            ),\n          ),\n      },\n      { lifetime: Lifetime.Singleton },\n    ),\n  ]\n}\n\nfunction registerConnectorDependencies(\n  scope: ExecutionScopeDefinition<'global'>,\n): ResultDisposable[] {\n  return [\n    scope.register(\n      {\n        token: DefaultConnectorDocumentManager,\n        useFactory: defineFactory(DefaultConnectorDocumentManager, [\n          DefaultConnectorDocumentDataManager,\n          RemoteFunctionManagerToken,\n        ]),\n      },\n      { lifetime: Lifetime.Singleton },\n    ),\n    scope.register({\n      token: ConnectorDocumentManagerToken,\n      useToken: DefaultConnectorDocumentManager,\n    }),\n    scope.register(\n      {\n        token: ConnectorExperimentationToken,\n        useFactory: defineFactory(DefaultConnectorExperimentation, [RemoteFunctionManagerToken]),\n      },\n      { lifetime: Lifetime.Singleton },\n    ),\n    scope.register(\n      {\n        token: ConnectorCAPIToken,\n        useFactory: defineFactory(DefaultConnectorCAPI, [\n          RemoteFunctionManagerToken,\n          DefaultConnectorCAPIRemoteFunctionHandler,\n        ]),\n      },\n      { lifetime: Lifetime.Singleton },\n    ),\n    scope.register(\n      {\n        token: ConnectorTextDecorationToken,\n        useFactory: defineFactory(DefaultConnectorTextDecoration, [\n          RemoteFunctionManagerToken,\n          ConnectorDocumentManagerToken,\n          DefaultConnectorTextDecorationRemoteFunctionHandler,\n        ]),\n      },\n      { lifetime: Lifetime.Singleton },\n    ),\n    scope.register(\n      {\n        token: BufferedConnectorCAPI,\n        useFactory: defineFactory(BufferedConnectorCAPI, [\n          ConnectorCAPIToken,\n          ConnectorDocumentManagerToken,\n        ]),\n      },\n      { lifetime: Lifetime.Singleton },\n    ),\n    scope.register(\n      {\n        token: CAPIProviderToken,\n        useFactory: resolver =>\n          pipe(\n            resolver.resolve(BufferedConnectorCAPI),\n            Result.map(source => ({\n              create: (id: DocumentID) =>\n                new PerDocumentCAPITransportFactory(id, source.create(id)),\n            })),\n          ),\n      },\n      { lifetime: Lifetime.Singleton },\n    ),\n  ]\n}\n\nfunction initializeConnectorsOnGlobalScopeStart(\n  scope: ExecutionScopeDefinition<'global'>,\n): ResultDisposable {\n  return Result.success(\n    scope.onStart(execution => {\n      Result.all([\n        execution.resolve(ConnectorDocumentManagerToken),\n        execution.resolve(ConnectorTextDecorationToken),\n        execution.resolve(BufferedConnectorCAPI),\n      ])\n\n      return AsyncResult.success()\n    }),\n  )\n}\n\nfunction injectConnectorStatusInHUDOnGlobalScopeStart(\n  scope: ExecutionScopeDefinition<'global'>,\n  context: FeatureContext,\n): ResultDisposable {\n  return pipe(\n    context.getFeature('performance-hud'),\n    Result.map(performanceHUDFeature =>\n      scope.onStart(execution =>\n        // We log and ignore all errors from this pipe at the bottom\n        // so that we don't interfere with global scope startup since the HUD\n        // is a dev-only feature.\n        pipe(\n          Result.all([\n            execution.resolve(performanceHUDFeature.provides.HUD),\n            execution.resolve(DefaultConnectorMessageTransport),\n            execution.resolve(DefaultConnectorDocumentDataManager),\n            execution.resolve(ConnectorConfigurationToken),\n          ] as const),\n          Result.map(([hud, transport, connectorTextDocumentManager, configuration]) => {\n            const view = hud.createValue<string>({ label: 'Connector' })\n\n            const subscription = pipe(\n              Rx.fromSubscribableState(connectorTextDocumentManager.lastActiveDocumentConnectionId),\n              Rx.filter(isNonNullable),\n              Rx.switchMap(connectorId =>\n                pipe(\n                  Rx.fromSubscribable(\n                    transport.connectionTimedOut(connectorId, configuration.connectorTimeoutMs),\n                  ),\n                  Rx.map(() => 'Inactive'),\n                  Rx.startWith('Active'),\n                ),\n              ),\n              Rx.subscribe(status => view.push(status)),\n            )\n\n            return createDisposable(() => dispose([subscription, view]))\n          }),\n\n          AsyncResult.fromResult,\n        ),\n      ),\n    ),\n    Result.flatMapError(error => {\n      logger.error('Unexpected error using HUD in feature-connector', error)\n      // We do not return HUD errors since it's a dev-only UI.\n      return Result.success(createDisposable(constVoid))\n    }),\n  )\n}\n\nexport { ConnectorConfigurationToken, ConnectorMessageTransportToken } from './dependencies'\n\nexport type { ConnectorConfiguration } from './ConnectorConfiguration'\nexport type { ConnectorDocumentManager } from './ConnectorDocumentManager'\nexport type {\n  ConnectorID,\n  ConnectorMessageTransport,\n  ConnectorMessageTransportMetadata,\n} from './ConnectorMessageTransport'\nexport type {\n  CAPIConnectedRequest,\n  CAPIDisconnectedRequest,\n  CAPIMessageReceivedRequest,\n  ConnectorCAPI,\n  ConnectorCAPIMessage,\n} from './extensions/ConnectorCAPI'\nexport type { ConnectorExperimentation } from './extensions/ConnectorExperimentation'\nexport type {\n  ConnectorTextDecoration,\n  ConnectorTextDecorationInteractionClient as ConnectorTextDecorationInteraction,\n  ConnectorTextDecorationVisibilityProvider as ConnectorTextDecorationVisibility,\n  TextDecorationInteractionRequest,\n  TextDecorationVisibilityRequest,\n} from './extensions/ConnectorTextDecoration'\nexport type { DocumentID, RemoteDocument, RemoteDocumentGeometryInfo } from './RemoteDocument'\n"],"names":["SingleConsumerBufferedEmitter","__privateAdd","_buffer","_observer","_closed","value","__privateGet","observer","_stack","logger","createDisposable","disposable","__using","__privateSet","toObserver","_a","_","_error","_hasError","__callDispose","_connector","_buffers","_disposables","_BufferedConnectorCAPI_instances","getOrCreateBuffer_fn","BufferedConnectorCAPI","connector","manager","__privateMethod","request","document","dispose","documentID","buffer","_source","_documentId","_sessionID","_subscription","PerDocumentCAPITransportFactory","documentId","source","sessionID","currentLogger","capiToDocumentRevision","queue","TextRevisionSynchronizedQueue","onDidReceive","onDidClose","Emitter","onDidError","connected","disposables","subscription","CAPITransportDisconnectedError","message","capiRevision","documentRevision","pipe","Rx","AsyncResult.unsafe","AsyncResult.mapError","sideEffect","error","CustomError","capiSessionId","LRUCache","options","_LRUCache_instances","_capacity","_nodes","_head","_tail","key","node","unlink_fn","setHead_fn","_logger","_document","_DefaultRemoteDocument_instances","transformPixelToLogical_get","DefaultRemoteDocumentData","connectorId","settings","__publicField","DefaultRemoteDocument","AsyncResult.map","response","Delta","textChange","revision","ranges","Rect.create","Rect.map","Point.create","Point.map","map","id","boundingBoxes","r","TextRevision.create","rects","Rect.unionOrElse","Rect.collapsed","physicalToLogicalPixel","identity","x","_connectorConfiguration","_documents","_onDocumentDidCreate","_onDocumentWillDestroy","_onDebugSignal","_connectionIdToHandshakeOptionsMap","_protocolVersion","_lastActiveDocumentConnectionId","_documentDidFocusRequest","_focusedDocument","_DefaultConnectorDocumentDataManager_instances","removeRemoteDocument_fn","handleDocumentGeometryWillChange_fn","handleDocumentTextDidChange_fn","handleDocumentSelectedTextRangesDidChange_fn","handleDocumentGeometryDidChange_fn","handleDocumentDidFocus_fn","handleDocumentDidDestroy_fn","getDocument_fn","createDocument_fn","_documentManager","MAGIC_ENABLE_DEBUG_STRING","DefaultConnectorDocumentDataManager","configuration","transport","State","AsyncResult.success","metadata","AsyncResult.failure","UnsupportedProtocolVersionError","env","getEnv","focus","connectionId","Result.success","Result.failure","DocumentNotFoundError","_connectionId","op","DefaultConnectorDocumentManager","documentManager","rpc","documentData","Result.map","_transport","_lastMessageConnectorId","CONNECTOR_CONNECTION_TIMEOUT_MS","CONNECTOR_CONNECTION_TIMEOUT_BUFFER_MS","DefaultConnectorMessageTransport","timeoutMs","receive","handle","ConnectorMessageTransportToken","asFeatureDependency","createInjectionToken","ConnectorConfigurationToken","_onMessage","_capiSessions","_manager","_client","DefaultConnectorCAPIRemoteFunctionHandler","Result.flatMap","UnknownSessionError","DefaultConnectorCAPI","capiMessageProvider","sessionId","DefaultConnectorExperimentation","req","_onSetTextDecorationVisibility","_visibilityState","_connectorTextDecorationVisibilityProvider","DefaultConnectorTextDecorationRemoteFunctionHandler","state","change","DefaultConnectorTextDecoration","connectorTextDecorationVisibilityProvider","AsyncResult.fromResult","AsyncResult.flatMap","logicalToPhysicalPixel","rect","ConnectorDocumentManagerToken","ConnectorExperimentationToken","ConnectorCAPIToken","ConnectorTextDecorationToken","RemoteFunctionManagerToken","activate","context","Result.all","scope","monitoringFeature","ResultDisposable","registerConnectorHandlerDependencies","registerRPCDependencies","registerConnectorDependencies","initializeConnectorsOnGlobalScopeStart","injectConnectorStatusInHUDOnGlobalScopeStart","defineFactory","Lifetime","resolver","capiConnector","textDecorationConnector","monitoring","sampler","RandomUserSampler","DefaultRemoteFunctionManager","CAPIProviderToken","execution","performanceHUDFeature","hud","connectorTextDocumentManager","view","isNonNullable","status","Result.flatMapError","constVoid"],"mappings":"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"}