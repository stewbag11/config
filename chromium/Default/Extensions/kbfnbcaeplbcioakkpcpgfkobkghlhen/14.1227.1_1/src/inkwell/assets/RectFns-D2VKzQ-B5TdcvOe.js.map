{"version":3,"file":"RectFns-D2VKzQ-B5TdcvOe.js","sources":["../../../util-geometry/dist/RectFns-D2VKzQ.mjs"],"sourcesContent":["/**\n * Create a Rect of the given kind.\n * @public\n */\nfunction create(r) {\n    return r;\n}\n/**\n * Convert a rect to a printable string\n * @public\n */\nfunction toString(r) {\n    return `Rect({ x: ${r.x}, y: ${r.y}, width: ${r.width}, height: ${r.height} })`;\n}\n/**\n * A collapsed rectangle located at (0, 0) with width and height 0.\n * @public\n */\nfunction collapsed() {\n    return create({ x: 0, y: 0, width: 0, height: 0 });\n}\n/**\n * Map a function over the x, y, width, and height of a rectangle.\n */\nfunction map(fn) {\n    return rect => create({\n        x: fn(rect.x),\n        y: fn(rect.y),\n        width: fn(rect.width),\n        height: fn(rect.height),\n    });\n}\n/**\n * Translate a rectangle by the given amount\n * @public\n * @param translation - x and y amount to translate\n */\nfunction translate(translation) {\n    return r => create({\n        x: r.x + translation.x,\n        y: r.y + translation.y,\n        width: r.width,\n        height: r.height,\n    });\n}\n/**\n * Calculates the intersection between two rectangles.\n * Returns a collapsed rectangle positioned at (0, 0) if the intersection is empty.\n * @public\n */\nfunction intersection(a, b) {\n    const x = Math.max(a.x, b.x);\n    const y = Math.max(a.y, b.y);\n    const width = Math.min(a.x + a.width, b.x + b.width) - x;\n    const height = Math.min(a.y + a.height, b.y + b.height) - y;\n    if (width <= 0 || height <= 0) {\n        return collapsed();\n    }\n    return create({ x, y, width, height });\n}\n/**\n * Returns `true` if the two rectangles intersect.\n * @public\n */\nfunction intersect(a, b) {\n    return !(b.x > a.x + a.width ||\n        b.x + b.width < a.x ||\n        b.y > a.y + a.height ||\n        b.y + b.height < a.y);\n}\n/**\n * Returns `true` if the rectangle has 0 width OR 0 height\n * @public\n */\nfunction isCollapsed(rect) {\n    return rect.width === 0 || rect.height === 0;\n}\n/**\n * Tests if a point is contained within a rectangle.\n * @public\n */\nfunction contains(rect, point) {\n    return (rect.x <= point.x &&\n        rect.y <= point.y &&\n        rect.x + rect.width >= point.x &&\n        rect.y + rect.height >= point.y);\n}\n/**\n * Calculates the union of a list of rectangles.\n * @public\n */\nfunction union(r, ...rects) {\n    const y = Math.min(r.y, ...rects.map(rect => rect.y));\n    const x = Math.min(r.x, ...rects.map(rect => rect.x));\n    const width = Math.max(r.x + r.width, ...rects.map(rect => rect.x + rect.width)) - x;\n    const height = Math.max(r.y + r.height, ...rects.map(rect => rect.y + rect.height)) - y;\n    return create({ x, y, width, height });\n}\n/**\n * Calculates the union of a list of rectangles, or returns a default value if the list is empty.\n * @param rects - The list of rectangles\n * @returns The union of the rectangles\n */\nfunction unionOrElse(defaultValue) {\n    return rects => rects.length > 0 ? union(...rects) : defaultValue;\n}\n/**\n * Shrink a rectangle by the given padding.\n * @public\n * @param padding - The amount of padding to remove on each side\n */\nfunction removePadding(padding) {\n    return rect => {\n        const normalizedPadding = typeof padding === 'number'\n            ? {\n                top: padding,\n                bottom: padding,\n                left: padding,\n                right: padding,\n            }\n            : {\n                top: padding.top ?? 0,\n                bottom: padding.bottom ?? 0,\n                left: padding.left ?? 0,\n                right: padding.right ?? 0,\n            };\n        return create({\n            x: rect.x + normalizedPadding.left,\n            y: rect.y + normalizedPadding.top,\n            width: rect.width - normalizedPadding.left - normalizedPadding.right,\n            height: rect.height - normalizedPadding.top - normalizedPadding.bottom,\n        });\n    };\n}\n/**\n * Grow a rectangle by the given padding.\n * @public\n * @param padding - The amount of padding to add on each side\n */\nfunction addPadding(padding) {\n    return rect => {\n        const normalizedPadding = typeof padding === 'number'\n            ? {\n                top: padding,\n                bottom: padding,\n                left: padding,\n                right: padding,\n            }\n            : {\n                top: padding.top ?? 0,\n                bottom: padding.bottom ?? 0,\n                left: padding.left ?? 0,\n                right: padding.right ?? 0,\n            };\n        return create({\n            x: rect.x - normalizedPadding.left,\n            y: rect.y - normalizedPadding.top,\n            width: rect.width + normalizedPadding.left + normalizedPadding.right,\n            height: rect.height + normalizedPadding.top + normalizedPadding.bottom,\n        });\n    };\n}\n/**\n * Check if two rectangles are equal.\n * @public\n */\nfunction equals(a, b) {\n    return (Math.abs(a.x - b.x) < Number.EPSILON &&\n        Math.abs(a.y - b.y) < Number.EPSILON &&\n        Math.abs(a.width - b.width) < Number.EPSILON &&\n        Math.abs(a.height - b.height) < Number.EPSILON);\n}\n\nexport { addPadding, collapsed, contains, create, equals, intersect, intersection, isCollapsed, map, removePadding, toString, translate, union, unionOrElse };\n//# sourceMappingURL=RectFns-D2VKzQ.mjs.map\n"],"names":["create","r","toString","collapsed","map","fn","rect","translate","translation","intersection","a","b","x","y","width","height","intersect","isCollapsed","contains","point","union","rects","unionOrElse","defaultValue","addPadding","padding","normalizedPadding","equals"],"mappings":"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"}