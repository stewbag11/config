{"version":3,"file":"TextRevisionSynchronizedQueue-B1Rn9G-BX2te2S9.js","sources":["../../../util-text/dist/TextRevisionSynchronizedQueue-B1Rn9G.mjs"],"sourcesContent":["import { Emitter } from '@grammarly/util-reactive';\n\n/**\n * A queue that will enqueue messages for which the text revision has not been received yet, and dequeue and\n * emit all messages when a text revision is received and the message's revision is either undefined or equal or smaller\n * than the received text revision.\n * @public\n */\nclass TextRevisionSynchronizedQueue {\n    #messages = new Emitter();\n    #pending = [];\n    #lastKnownTextRevision = undefined;\n    /**\n     * Event that emits messages getting dequeued.\n     */\n    messages = this.#messages;\n    /**\n     * Last text revision that was pushed to the queue, or `undefined` if none was pushed\n     * and the queue was not initialized on a specific text revision.\n     */\n    get textRevision() {\n        return this.#lastKnownTextRevision;\n    }\n    /**\n     * Enqueue a message until the provided text revision is received.\n     * When dequeued, the returned promise will be resolved and the message\n     * will be emitted on the `messages` event.\n     * @param message - Message to enqueue\n     * @param textRevision - Text revision to wait for before dequeuing the message. When not provided, the last known non-undefined text revision is used.\n     */\n    enqueue(message, textRevision) {\n        const { promise, resolve } = Promise.withResolvers();\n        this.#pending.push({\n            message,\n            textRevision,\n            resolve,\n            promise,\n        });\n        this.#flushPending();\n        return promise;\n    }\n    /**\n     * Push a new text revision. This will cause flushing all messages\n     * that have a revision smaller or equal to this new revision.\n     * @param textRevision - New text revision\n     */\n    pushNewTextRevision(newTextRevision) {\n        if (this.#lastKnownTextRevision === undefined ||\n            newTextRevision > this.#lastKnownTextRevision) {\n            this.#lastKnownTextRevision = newTextRevision;\n            this.#flushPending();\n        }\n    }\n    #flushPending() {\n        if (this.#lastKnownTextRevision === undefined)\n            return;\n        while (this.#pending.length > 0) {\n            const { message, promise, textRevision, resolve } = this.#pending.at(0);\n            if (textRevision !== undefined && textRevision > this.#lastKnownTextRevision) {\n                break;\n            }\n            this.#pending.shift();\n            resolve();\n            // Emit the message once the promise has resolved, so we first notify the caller of `enqueue`,\n            // and then emit the dequeued message in the `messages` event.\n            void promise.then(() => this.#messages.emit(message));\n        }\n    }\n}\n\nexport { TextRevisionSynchronizedQueue };\n//# sourceMappingURL=TextRevisionSynchronizedQueue-B1Rn9G.mjs.map\n"],"names":["TextRevisionSynchronizedQueue","__privateAdd","_TextRevisionSynchronizedQueue_instances","_messages","Emitter","_pending","_lastKnownTextRevision","__publicField","__privateGet","message","textRevision","promise","resolve","__privateMethod","flushPending_fn","newTextRevision","__privateSet"],"mappings":"wlBAQA,MAAMA,CAA8B,CAApC,cAAAC,EAAA,KAAAC,GACID,EAAA,KAAAE,EAAY,IAAIC,GAChBH,EAAA,KAAAI,EAAW,CAAA,GACXJ,EAAA,KAAAK,GAIAC,EAAA,gBAAWC,EAAA,KAAKL,IAKhB,IAAI,cAAe,CACf,OAAOK,EAAA,KAAKF,EACf,CAQD,QAAQG,EAASC,EAAc,CAC3B,KAAM,CAAE,QAAAC,EAAS,QAAAC,CAAS,EAAG,QAAQ,cAAa,EAClD,OAAAJ,EAAA,KAAKH,GAAS,KAAK,CACf,QAAAI,EACA,aAAAC,EACA,QAAAE,EACA,QAAAD,CACZ,CAAS,EACDE,EAAA,KAAKX,EAAAY,GAAL,WACOH,CACV,CAMD,oBAAoBI,EAAiB,EAC7BP,EAAA,KAAKF,KAA2B,QAChCS,EAAkBP,EAAA,KAAKF,MACvBU,EAAA,KAAKV,EAAyBS,GAC9BF,EAAA,KAAKX,EAAAY,GAAL,WAEP,CAgBL,CA3DIX,EAAA,YACAE,EAAA,YACAC,EAAA,YAHJJ,EAAA,YA6CIY,EAAa,UAAG,CACZ,GAAIN,EAAA,KAAKF,KAA2B,OAEpC,KAAOE,EAAA,KAAKH,GAAS,OAAS,GAAG,CAC7B,KAAM,CAAE,QAAAI,EAAS,QAAAE,EAAS,aAAAD,EAAc,QAAAE,GAAYJ,EAAA,KAAKH,GAAS,GAAG,CAAC,EACtE,GAAIK,IAAiB,QAAaA,EAAeF,EAAA,KAAKF,GAClD,MAEJE,EAAA,KAAKH,GAAS,QACdO,IAGKD,EAAQ,KAAK,IAAMH,EAAA,KAAKL,GAAU,KAAKM,CAAO,CAAC,CACvD,CACJ"}