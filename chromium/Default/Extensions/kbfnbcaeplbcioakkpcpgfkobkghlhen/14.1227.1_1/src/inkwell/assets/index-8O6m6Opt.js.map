{"version":3,"file":"index-8O6m6Opt.js","sources":["../../../feature-inline-decorations-connector/src/ConnectorTextDecorationVisibilitySource.ts","../../../feature-inline-decorations-connector/src/ConnectorTextDecorationInteractionObserver.ts","../../../feature-inline-decorations-connector/src/index.ts"],"sourcesContent":["import { Rx } from '@grammarly/util-reactive'\nimport type { ConnectorTextDecorationVisibility } from '@grammarly/feature-connector'\nimport type { TextDocument } from '@grammarly/feature-document-session'\nimport type {\n  TextDecorationVisibilityChangeRequest,\n  TextDecorationVisibilitySource,\n} from '@grammarly/feature-inline-decorations'\nimport type { SuggestionId } from '@grammarly/feature-suggestion'\nimport { pipe } from '@grammarly/util-function'\nimport { map, toArray } from '@grammarly/util-iterable'\n\n/**\n * TextDecorationVisibilitySource that takes the visibility changes from connector.\n */\nexport class ConnectorTextDecorationVisibilitySource implements Disposable {\n  readonly #disposables = new DisposableStack()\n  readonly #visibilityState = new Map<SuggestionId, 'visible' | 'emphasized'>()\n  readonly #visibilityChanges = new Rx.Subject<TextDecorationVisibilityChangeRequest>()\n\n  readonly visibilityChanges: TextDecorationVisibilitySource = Rx.toSubscribable(\n    Rx.concat(\n      // Replay the current visibility state on subscription\n      Rx.defer(() =>\n        this.#visibilityState.size > 0\n          ? Rx.of<TextDecorationVisibilityChangeRequest>({\n              partial: false,\n              changes: pipe(\n                this.#visibilityState.entries(),\n                map(([suggestionId, visibility]) => ({\n                  id: { kind: 'suggestion' as const, suggestionId },\n                  visibility,\n                })),\n                toArray,\n              ),\n            })\n          : Rx.EMPTY,\n      ),\n      // And follow with live changes\n      this.#visibilityChanges,\n    ),\n  )\n\n  constructor(\n    textDocument: Pick<TextDocument, 'id'>,\n    textDecorationConnector: ConnectorTextDecorationVisibility,\n  ) {\n    this.#disposables.use(\n      pipe(\n        Rx.fromSubscribable(textDecorationConnector.onSetTextDecorationVisibility(textDocument.id)),\n        Rx.map(request => ({\n          partial: request.partial,\n          changes: request.changes.map(change => ({\n            // TODO: we assume suggestion-id are the same as raw capi alert id\n            id: { kind: 'suggestion' as const, suggestionId: change.alertId as SuggestionId },\n            visibility: change.visibility,\n          })),\n        })),\n        Rx.tap(request => {\n          if (!request.partial) {\n            this.#visibilityState.clear()\n          }\n          request.changes.forEach(change => {\n            if (change.visibility === 'hidden') {\n              this.#visibilityState.delete(change.id.suggestionId)\n            } else {\n              this.#visibilityState.set(change.id.suggestionId, change.visibility)\n            }\n          })\n        }),\n        Rx.subscribe(this.#visibilityChanges),\n      ),\n    )\n  }\n\n  [Symbol.dispose]() {\n    this.#disposables.dispose()\n  }\n}\n","import type { CAPISuggestionCollection } from '@grammarly/feature-capi-suggestion'\nimport type { ConnectorTextDecorationInteraction } from '@grammarly/feature-connector'\nimport type { TextDocument } from '@grammarly/feature-document-session'\nimport { pipe, sideEffect } from '@grammarly/util-function'\nimport { logger } from '@grammarly/util-logging'\nimport { AsyncResult } from '@grammarly/util-result'\n\nimport type { TextDecorationInteractionObserver } from '@grammarly/feature-inline-decorations'\n\n/**\n * TextDecorationObserver that sends interactions to connector\n */\nexport class ConnectorTextDecorationInteractionObserver {\n  readonly #textDocument: Pick<TextDocument, 'id' | 'hasFocus' | 'geometry'>\n  readonly #capiSuggestionCollection: CAPISuggestionCollection\n  readonly #textDecorationConnector: ConnectorTextDecorationInteraction\n  readonly #logger = logger.createLogger('ConnectorTextDecorationInteractionObserver')\n\n  constructor(\n    textDocument: Pick<TextDocument, 'id' | 'hasFocus' | 'geometry'>,\n    capiSuggestionCollection: CAPISuggestionCollection,\n    textDecorationConnector: ConnectorTextDecorationInteraction,\n  ) {\n    this.#textDocument = textDocument\n    this.#capiSuggestionCollection = capiSuggestionCollection\n    this.#textDecorationConnector = textDecorationConnector\n  }\n\n  onTextDecorationInteraction: TextDecorationInteractionObserver = ({\n    kind,\n    suggestionId,\n    position,\n    rect,\n    decorationRects,\n  }) => {\n    if (suggestionId === undefined) {\n      // We ignore interactions on decorations that have no associated suggestions\n      return\n    }\n    const suggestion = this.#capiSuggestionCollection.getById(suggestionId)\n    if (!suggestion) {\n      return this.#logger.error('Failed to find suggestion by id')\n    }\n\n    void pipe(\n      this.#textDecorationConnector.notifyTextDecorationInteraction({\n        documentID: this.#textDocument.id,\n        interactionType: kind,\n        alertId: String(suggestion.alert.id),\n        position,\n        rect,\n        decorationRects,\n      }),\n      AsyncResult.mapError(\n        sideEffect(error =>\n          this.#logger.error('Failed to send notifyTextDecorationInteraction', error),\n        ),\n      ),\n    )\n  }\n}\n","/**\n * This feature resolves a document instance of TextDecorationController and registers:\n * - a text-decoration visibility source provided by connector,\n * - a text-decoration interaction handler that sends unhandled interaction events to connector.\n * @packageDocumentation\n */\n\nimport type { Activate, ExecutionScopeDefinition, Feature } from '@grammarly/feature'\nimport { defineFactory, Lifetime } from '@grammarly/util-dependency-container'\nimport { pipe } from '@grammarly/util-function'\nimport { AsyncResult, Result, ResultDisposable } from '@grammarly/util-result'\nimport { ConnectorTextDecorationVisibilitySource } from './ConnectorTextDecorationVisibilitySource'\n\nimport type {} from '@grammarly/feature-capi-suggestion'\nimport type {} from '@grammarly/feature-connector'\nimport type {} from '@grammarly/feature-document-session'\nimport type {} from '@grammarly/feature-inline-decorations'\nimport { ConnectorTextDecorationInteractionObserver } from './ConnectorTextDecorationInteractionObserver'\n\n/** @public */\nexport const activate: Activate = context =>\n  pipe(\n    Result.all([\n      context.getExecutionScope('document-session'),\n      context.getFeature('document-session'),\n      context.getFeature('capi-suggestion'),\n      context.getFeature('inline-decorations'),\n      context.getFeature('connector'),\n    ] as const),\n    Result.flatMap(\n      ([\n        documentSessionScope,\n        documentSessionFeature,\n        capiSuggestionFeature,\n        inlineDecorationsFeature,\n        connectorFeature,\n      ]) =>\n        ResultDisposable.all([\n          ...registerDependencies(\n            documentSessionScope,\n            documentSessionFeature,\n            capiSuggestionFeature,\n            connectorFeature,\n          ),\n          Result.success(\n            documentSessionScope.onStart(execution =>\n              pipe(\n                Result.all([\n                  execution.resolve(ConnectorTextDecorationVisibilitySource),\n                  execution.resolve(ConnectorTextDecorationInteractionObserver),\n                  execution.resolve(inlineDecorationsFeature.provides.TextDecorationController),\n                ] as const),\n                Result.map(([visibilitySource, interactionObserver, textDecorationController]) => {\n                  const disposables = new DisposableStack()\n                  disposables.use(\n                    textDecorationController.addVisibilitySource(\n                      visibilitySource.visibilityChanges,\n                    ),\n                  )\n                  disposables.use(\n                    // Connector only handles unhandled interaction events.\n                    // This is to let other features handle some events if needed.\n                    textDecorationController.onUnhandledTextDecorationInteraction(\n                      interactionObserver.onTextDecorationInteraction,\n                    ),\n                  )\n                  return disposables\n                }),\n                AsyncResult.fromResult,\n              ),\n            ),\n          ),\n        ]),\n    ),\n  )\n\nfunction registerDependencies(\n  documentSessionScope: ExecutionScopeDefinition<'document-session'>,\n  documentSessionFeature: Feature<'document-session'>,\n  capiSuggestionFeature: Feature<'capi-suggestion'>,\n  connectorFeature: Feature<'connector'>,\n) {\n  return [\n    documentSessionScope.register(\n      {\n        token: ConnectorTextDecorationVisibilitySource,\n        useFactory: defineFactory(ConnectorTextDecorationVisibilitySource, [\n          documentSessionFeature.provides.TextDocument,\n          connectorFeature.provides.ConnectorTextDecoration,\n        ]),\n      },\n      { lifetime: Lifetime.ContainerScoped },\n    ),\n    documentSessionScope.register(\n      {\n        token: ConnectorTextDecorationInteractionObserver,\n        useFactory: defineFactory(ConnectorTextDecorationInteractionObserver, [\n          documentSessionFeature.provides.TextDocument,\n          capiSuggestionFeature.provides.CAPISuggestionCollection,\n          connectorFeature.provides.ConnectorTextDecoration,\n        ]),\n      },\n      { lifetime: Lifetime.ContainerScoped },\n    ),\n  ]\n}\n"],"names":["_disposables","_visibilityState","_visibilityChanges","ConnectorTextDecorationVisibilitySource","textDocument","textDecorationConnector","__privateAdd","Rx","__publicField","__privateGet","pipe","map","suggestionId","visibility","toArray","request","change","_textDocument","_capiSuggestionCollection","_textDecorationConnector","_logger","ConnectorTextDecorationInteractionObserver","capiSuggestionCollection","logger","kind","position","rect","decorationRects","suggestion","AsyncResult.mapError","sideEffect","error","__privateSet","activate","context","Result.all","Result.flatMap","documentSessionScope","documentSessionFeature","capiSuggestionFeature","inlineDecorationsFeature","connectorFeature","ResultDisposable","registerDependencies","Result.success","execution","Result.map","visibilitySource","interactionObserver","textDecorationController","disposables","AsyncResult.fromResult","defineFactory","Lifetime"],"mappings":"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"}