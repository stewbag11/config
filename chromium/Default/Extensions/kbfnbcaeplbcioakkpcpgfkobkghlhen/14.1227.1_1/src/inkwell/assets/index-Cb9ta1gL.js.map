{"version":3,"file":"index-Cb9ta1gL.js","sources":["../../../feature-monitoring/src/index.ts"],"sourcesContent":["/**\n * This feature provides feature scoped monitoring service.\n * @packageDocumentation\n */\n\nimport type { Activate } from '@grammarly/feature'\nimport { createInjectionToken, Lifetime } from '@grammarly/util-dependency-container'\nimport { CustomError } from '@grammarly/util-error'\nimport { pipe } from '@grammarly/util-function'\nimport { isDev } from '@grammarly/util-is-dev'\nimport { logger as defaultLogger } from '@grammarly/util-logging'\nimport {\n  FeMetricWriter,\n  MonitoringService,\n  type CounterMetric,\n  type CounterMetricOptions,\n  type MetricMonitor,\n  type MetricFactory as Monitoring,\n  type TimerMetric,\n  type TimerMetricOptions,\n} from '@grammarly/util-monitoring'\nimport { Result, ResultDisposable } from '@grammarly/util-result'\n\n/** @public */\nexport type {\n  CounterMetric,\n  CounterMetricOptions,\n  MetricMonitor,\n  Monitoring,\n  TimerMetric,\n  TimerMetricOptions,\n}\n\n/** @public */\nexport const MonitoringToken = createInjectionToken<Monitoring>(Symbol('Monitoring'))\n\n/** @public */\nexport const activate: Activate = context => {\n  const logger = defaultLogger.createLogger('monitoring')\n\n  return pipe(\n    context.getExecutionScope('global'),\n    Result.flatMap(scope =>\n      ResultDisposable.all([\n        scope.register(\n          {\n            token: MonitoringToken,\n            useFactory: resolver => {\n              const metadata = context.getResolutionMetadata()\n              if (metadata === null) {\n                return Result.failure(\n                  new CustomError('Monitoring service can only be used in feature context.'),\n                )\n              }\n\n              const featureName = metadata.feature.replace(/-/g, '_')\n              const namespace = 'feature_' + featureName\n              const validate = (metric: string) => {\n                if (!isDev) return // Skip validation in production.\n\n                if (metric.startsWith(featureName + '_') || metric.startsWith(namespace + '_')) {\n                  logger.error(\n                    `Invalid metric name: ${metric}. Use only the metric name without feature name prefix as it is added automatically.`,\n                  )\n\n                  throw new CustomError(`Invalid metric name: ${metric}`)\n                }\n              }\n\n              return pipe(\n                resolver.resolve(FeMetricWriter),\n                Result.map(writer => new MonitoringService(namespace, writer)),\n                Result.map(monitoring => ({\n                  count: (name, options) => {\n                    validate(name)\n                    return monitoring.count(name, options)\n                  },\n                  duration: (name, options) => {\n                    validate(name)\n                    return monitoring.duration(name, options)\n                  },\n                })),\n              )\n            },\n          },\n          { lifetime: Lifetime.Transient },\n        ),\n        scope.register(\n          {\n            token: FeMetricWriter,\n            useFactory: () => Result.success(new FeMetricWriter({})),\n          },\n          { lifetime: Lifetime.Singleton, override: false },\n        ),\n      ]),\n    ),\n  )\n}\n"],"names":["MonitoringToken","createInjectionToken","activate","context","defaultLogger","pipe","Result.flatMap","scope","ResultDisposable","resolver","metadata","Result.failure","CustomError","namespace","FeMetricWriter","Result.map","writer","MonitoringService","monitoring","name","options","Lifetime","Result.success"],"mappings":"sJAkCO,MAAMA,EAAkBC,EAAiC,OAAO,YAAY,CAAC,EAGvEC,EAAgCC,IAC5BC,EAAc,aAAa,YAAY,EAE/CC,EACLF,EAAQ,kBAAkB,QAAQ,EAClCG,EAAeC,GACbC,EAAiB,IAAI,CACnBD,EAAM,SACJ,CACE,MAAOP,EACP,WAAwBS,GAAA,CAChB,MAAAC,EAAWP,EAAQ,wBACzB,GAAIO,IAAa,KACf,OAAOC,EACL,IAAIC,EAAY,yDAAyD,CAAA,EAK7E,MAAMC,EAAY,WADEH,EAAS,QAAQ,QAAQ,KAAM,GAAG,EAc/C,OAAAL,EACLI,EAAS,QAAQK,CAAc,EAC/BC,EAAWC,GAAU,IAAIC,EAAkBJ,EAAWG,CAAM,CAAC,EAC7DD,EAA0BG,IAAA,CACxB,MAAO,CAACC,EAAMC,IAELF,EAAW,MAAMC,EAAMC,CAAO,EAEvC,SAAU,CAACD,EAAMC,IAERF,EAAW,SAASC,EAAMC,CAAO,CAC1C,EACA,CAAA,CAEN,CACF,EACA,CAAE,SAAUC,EAAS,SAAU,CACjC,EACAd,EAAM,SACJ,CACE,MAAOO,EACP,WAAY,IAAMQ,EAAe,IAAIR,EAAe,CAAE,CAAA,CAAC,CACzD,EACA,CAAE,SAAUO,EAAS,UAAW,SAAU,EAAM,CAClD,CAAA,CACD,CACH,CAAA"}