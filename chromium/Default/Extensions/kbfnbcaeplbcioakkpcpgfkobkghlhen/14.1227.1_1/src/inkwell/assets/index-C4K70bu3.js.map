{"version":3,"file":"index-C4K70bu3.js","sources":["../../../../node_modules/.pnpm/@grammarly+design-system@6.18.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@grammarly/design-system/dist/packages/tokens/generated/colors.js","../../../util-capi-alert/dist/index.mjs","../../../feature-inline-decorations/src/getTextDecorationStyle.ts","../../../feature-inline-decorations/src/CAPITextDecorationManager.ts","../../../feature-inline-decorations/src/index.ts"],"sourcesContent":["const Blue0 = \"#F3F6FF\";\nconst Blue10 = \"#D1DBFE\";\nconst Blue20 = \"#ADBFF9\";\nconst Blue30 = \"#7D99F0\";\nconst Blue40 = \"#5D7FE9\";\nconst Blue60 = \"#2551DA\";\nconst Blue80 = \"#02379E\";\nconst Blue90 = \"#000A62\";\nconst Blue100 = \"#000A26\";\nconst BlueGray0 = \"#F4F4F6\";\nconst BlueGray5 = \"#E2E4E9\";\nconst BlueGray10 = \"#CDD1DC\";\nconst BlueGray20 = \"#C2C6D4\";\nconst BlueGray30 = \"#ADB2C3\";\nconst BlueGray35 = \"#99A0B3\";\nconst BlueGray40 = \"#878DA2\";\nconst BlueGray50 = \"#798096\";\nconst BlueGray60 = \"#646B81\";\nconst BlueGray70 = \"#565B6C\";\nconst BlueGray80 = \"#474B58\";\nconst BlueGray90 = \"#27282E\";\nconst BlueGray100 = \"#161719\";\nconst Gold0 = \"#FFF6E0\";\nconst Gold10 = \"#FFEBB8\";\nconst Gold20 = \"#FFDC85\";\nconst Gold30 = \"#FFBF47\";\nconst Gold40 = \"#FFA10A\";\nconst Gold60 = \"#E57300\";\nconst Gold80 = \"#BD5200\";\nconst Gold90 = \"#7A3500\";\nconst Gold100 = \"#1A0B00\";\nconst Green0 = \"#EAFAF9\";\nconst Green10 = \"#B1F0E8\";\nconst Green20 = \"#73E1D4\";\nconst Green30 = \"#2CC9B6\";\nconst Green40 = \"#16AC9A\";\nconst Green60 = \"#027E6F\";\nconst Green80 = \"#016A5E\";\nconst Green90 = \"#014C43\";\nconst Green100 = \"#00231F\";\nconst LightGreen = \"#00E0AC\";\nconst Magenta0 = \"#FFE5F0\";\nconst Magenta10 = \"#FEC8DD\";\nconst Magenta20 = \"#FAACCB\";\nconst Magenta30 = \"#F079A8\";\nconst Magenta40 = \"#E14683\";\nconst Magenta60 = \"#D21861\";\nconst Magenta80 = \"#990C43\";\nconst Magenta90 = \"#600428\";\nconst Magenta100 = \"#26000F\";\nconst NeutralGray0 = \"#F5F5F5\";\nconst NeutralGray5 = \"#E6E6E6\";\nconst NeutralGray10 = \"#EBEBEB\";\nconst NeutralGray20 = \"#D9D9D9\";\nconst NeutralGray30 = \"#BCBCBC\";\nconst NeutralGray35 = \"#A9A9A9\";\nconst NeutralGray40 = \"#A8A8A8\";\nconst NeutralGray50 = \"#858585\";\nconst NeutralGray60 = \"#707070\";\nconst NeutralGray70 = \"#616161\";\nconst NeutralGray80 = \"#545454\";\nconst NeutralGray90 = \"#2E2E2E\";\nconst NeutralGray100 = \"#1C1C1C\";\nconst Purple0 = \"#F7F6FE\";\nconst Purple10 = \"#DDD9F9\";\nconst Purple20 = \"#CAC3F7\";\nconst Purple30 = \"#A598F0\";\nconst Purple40 = \"#8675EB\";\nconst Purple60 = \"#5E47E5\";\nconst Purple80 = \"#3D27C0\";\nconst Purple90 = \"#1B0D6F\";\nconst Purple100 = \"#0E073B\";\nconst Red0 = \"#FFEAE9\";\nconst Red10 = \"#FFD1D0\";\nconst Red20 = \"#FFA8A8\";\nconst Red30 = \"#FF7A74\";\nconst Red40 = \"#FF4D45\";\nconst Red60 = \"#EB0A00\";\nconst Red80 = \"#CD0800\";\nconst Red90 = \"#8F0600\";\nconst Red100 = \"#510300\";\nconst Teal0 = \"#E6FDFD\";\nconst Teal10 = \"#CCFAFA\";\nconst Teal20 = \"#B3F8F8\";\nconst Teal30 = \"#80F3F3\";\nconst Teal40 = \"#00E6E6\";\nconst Teal60 = \"#00C4C4\";\nconst Teal80 = \"#027D7D\";\nconst Teal90 = \"#005C5C\";\nconst Teal100 = \"#001F1F\";\nconst Transparent = \"#FFFFFF00\";\nconst White = \"#FFFFFF\";\nconst YellowGreen = \"#D5FF00\";\nexport {\n  Blue0,\n  Blue10,\n  Blue100,\n  Blue20,\n  Blue30,\n  Blue40,\n  Blue60,\n  Blue80,\n  Blue90,\n  BlueGray0,\n  BlueGray10,\n  BlueGray100,\n  BlueGray20,\n  BlueGray30,\n  BlueGray35,\n  BlueGray40,\n  BlueGray5,\n  BlueGray50,\n  BlueGray60,\n  BlueGray70,\n  BlueGray80,\n  BlueGray90,\n  Gold0,\n  Gold10,\n  Gold100,\n  Gold20,\n  Gold30,\n  Gold40,\n  Gold60,\n  Gold80,\n  Gold90,\n  Green0,\n  Green10,\n  Green100,\n  Green20,\n  Green30,\n  Green40,\n  Green60,\n  Green80,\n  Green90,\n  LightGreen,\n  Magenta0,\n  Magenta10,\n  Magenta100,\n  Magenta20,\n  Magenta30,\n  Magenta40,\n  Magenta60,\n  Magenta80,\n  Magenta90,\n  NeutralGray0,\n  NeutralGray10,\n  NeutralGray100,\n  NeutralGray20,\n  NeutralGray30,\n  NeutralGray35,\n  NeutralGray40,\n  NeutralGray5,\n  NeutralGray50,\n  NeutralGray60,\n  NeutralGray70,\n  NeutralGray80,\n  NeutralGray90,\n  Purple0,\n  Purple10,\n  Purple100,\n  Purple20,\n  Purple30,\n  Purple40,\n  Purple60,\n  Purple80,\n  Purple90,\n  Red0,\n  Red10,\n  Red100,\n  Red20,\n  Red30,\n  Red40,\n  Red60,\n  Red80,\n  Red90,\n  Teal0,\n  Teal10,\n  Teal100,\n  Teal20,\n  Teal30,\n  Teal40,\n  Teal60,\n  Teal80,\n  Teal90,\n  Transparent,\n  White,\n  YellowGreen\n};\n","/**\n * This packages exports types and utilities to work with CAPI alerts.\n * @packageDocumentation\n */\n/** @public */\nfunction getAlertKind(alert) {\n    if (alert.hidden && alert.extra_properties?.free_premium === 'uphook') {\n        return 'premiumUphook';\n    }\n    else if (alert.group === 'WritingExpert') {\n        return 'writingExpert';\n    }\n    else if (alert.cardLayout?.outcome === 'Correctness') {\n        return 'correctness';\n    }\n    else if (alert.cardLayout?.outcome === 'Tone') {\n        return 'delivery';\n    }\n    else if (alert.cardLayout?.outcome === 'Clarity') {\n        return 'clarity';\n    }\n    else if (alert.cardLayout?.outcome === 'Engagement') {\n        return 'engagement';\n    }\n    else if (alert.cardLayout?.outcome === 'Originality') {\n        return 'originality';\n    }\n    else if (alert.cardLayout?.outcome === 'Knowledge Hub') {\n        return 'knowledgeHub';\n    }\n    else {\n        return null;\n    }\n}\n\nexport { getAlertKind };\n//# sourceMappingURL=index.mjs.map\n","import type {\n  BackgroundRenderOptions,\n  UnderlineRenderOptions,\n} from '@grammarly/feature-text-decoration'\n\nimport { Tokens } from '@grammarly/design-system'\nimport { getAlertKind, type CAPIAlertKind, type RawCAPIAlert } from '@grammarly/util-capi-alert'\nimport type { CSSHexColor } from '@grammarly/util-dom'\n\n/** @internal */\nexport interface DecorationStyle {\n  readonly underline?: UnderlineRenderOptions\n  readonly emphasizedUnderline?: UnderlineRenderOptions\n  readonly background?: BackgroundRenderOptions\n  readonly emphasizedBackground?: BackgroundRenderOptions\n}\n\nconst regularUnderlineThickness = 2\nconst regularUnderlineAlignment = 'outside'\nconst regularUnderlineBackgroundAlpha = 0.15\n\nconst regularTextDecorationStyle: Record<CAPIAlertKind | 'other', DecorationStyle> =\n  /* @__PURE__ */ (() => ({\n    premiumUphook: {\n      underline: {\n        // Tokens.SemanticColor.Color.Border.Premium.Default\n        color: Tokens.Color.Gold30,\n        style: 'solid',\n        thickness: regularUnderlineThickness,\n        align: regularUnderlineAlignment,\n      },\n      emphasizedBackground: {\n        // Tokens.SemanticColor.Color.Background.Premium.Default\n        color: alpha(Tokens.Color.Gold30, regularUnderlineBackgroundAlpha),\n      },\n    },\n    writingExpert: {\n      underline: {\n        // Tokens.SemanticColor.Color.Border.Engagement.Default\n        color: Tokens.Color.Green80,\n        style: 'ellipsis',\n        thickness: regularUnderlineThickness,\n        align: regularUnderlineAlignment,\n      },\n      emphasizedBackground: {\n        // Tokens.SemanticColor.Color.Background.Neutral.Default\n        color: alpha(Tokens.Color.NeutralGray60, regularUnderlineBackgroundAlpha),\n      },\n    },\n    correctness: {\n      underline: {\n        // Tokens.SemanticColor.Color.Border.Correctness.Default\n        color: Tokens.Color.Red60,\n        style: 'solid',\n        thickness: regularUnderlineThickness,\n        align: regularUnderlineAlignment,\n      },\n      emphasizedBackground: {\n        // Tokens.SemanticColor.Color.Background.Correctness.Default\n        color: alpha(Tokens.Color.Red60, regularUnderlineBackgroundAlpha),\n      },\n    },\n    delivery: {\n      underline: {\n        // Tokens.SemanticColor.Color.Border.Delivery.Default\n        color: Tokens.Color.Purple60,\n        style: 'solid',\n        thickness: regularUnderlineThickness,\n        align: regularUnderlineAlignment,\n      },\n      emphasizedBackground: {\n        // Tokens.SemanticColor.Color.Background.Delivery.Default\n        color: alpha(Tokens.Color.Purple60, regularUnderlineBackgroundAlpha),\n      },\n    },\n    clarity: {\n      underline: {\n        // Tokens.SemanticColor.Color.Border.Clarity.Default\n        color: Tokens.Color.Blue60,\n        style: 'solid',\n        thickness: regularUnderlineThickness,\n        align: regularUnderlineAlignment,\n      },\n      emphasizedBackground: {\n        // Tokens.SemanticColor.Color.Background.Clarity.Default\n        color: alpha(Tokens.Color.Blue60, regularUnderlineBackgroundAlpha),\n      },\n    },\n    engagement: {\n      underline: {\n        // Tokens.SemanticColor.Color.Border.Engagement.Default\n        color: Tokens.Color.Green80,\n        style: 'solid',\n        thickness: regularUnderlineThickness,\n        align: regularUnderlineAlignment,\n      },\n      emphasizedBackground: {\n        // Tokens.SemanticColor.Color.Background.Neutral.Default\n        color: alpha(Tokens.Color.Green80, regularUnderlineBackgroundAlpha),\n      },\n    },\n    originality: {\n      underline: {\n        // Tokens.SemanticColor.Color.Border.Plagiarism.Default\n        color: Tokens.Color.Teal80,\n        style: 'solid',\n        thickness: regularUnderlineThickness,\n        align: regularUnderlineAlignment,\n      },\n      emphasizedBackground: {\n        // Tokens.SemanticColor.Color.Background.Plagiarism.Default\n        color: alpha(Tokens.Color.Teal80, regularUnderlineBackgroundAlpha),\n      },\n    },\n    knowledgeHub: {\n      background: {\n        color: alpha(Tokens.Color.Green40, 0.3),\n      },\n      emphasizedBackground: {\n        color: alpha(Tokens.Color.Green40, 0.5),\n      },\n    },\n    other: {\n      underline: {\n        // Tokens.SemanticColor.Color.Border.Base.Default\n        color: Tokens.Color.NeutralGray60,\n        style: 'solid',\n        thickness: regularUnderlineThickness,\n        align: regularUnderlineAlignment,\n      },\n      emphasizedBackground: {\n        // Tokens.SemanticColor.Color.Background.Neutral.Default\n        color: alpha(Tokens.Color.NeutralGray60, regularUnderlineBackgroundAlpha),\n      },\n    },\n  }))()\n\n// Taken from Grammarly.UI.Common/Styles/Colors.xaml\nconst WindowsColors = {\n  Red30: '#F27388',\n  Red50: '#EA1537',\n  Blue30: '#79A8F2',\n  Blue50: '#4A6EE0',\n  Green30: '#87E8D1',\n  Green40: '#41D9B5',\n  Green50: '#15C39A',\n  Purple30: '#BD79ED',\n  Purple50: '#8F4CBF',\n  Yellow30: '#FFC940',\n  Yellow50: '#FFA600',\n  Neutral40: '#9FA6BF',\n  Neutral50: '#6D758D',\n  Cyan30: '#75E1EB',\n  Cyan60: '#09A4B2',\n} as const\n\nconst windowsLlamaUnderlineThickness = 3\nconst windowsLlamaUnderlineAlignment = 'outside'\nconst windowsLlamaUnderlineBackgroundAlpha = 0.2\nconst windowsLlamaNonEmphasizedUnderlineAlpha = 0.8\n\nconst windowsLlamaTextDecorationStyle: Record<CAPIAlertKind | 'other', DecorationStyle> =\n  /* @__PURE__ */ (() => ({\n    premiumUphook: {\n      // Not actually present in Grammarly.UI.Classic.Common/Styles/Outcomes.xaml, just my best interpolation/guess\n      underline: {\n        color: alpha(WindowsColors.Yellow30, windowsLlamaNonEmphasizedUnderlineAlpha),\n        style: 'solid',\n        thickness: windowsLlamaUnderlineThickness,\n        align: windowsLlamaUnderlineAlignment,\n      },\n      emphasizedUnderline: {\n        color: WindowsColors.Yellow50,\n        style: 'solid',\n        thickness: windowsLlamaUnderlineThickness,\n        align: windowsLlamaUnderlineAlignment,\n      },\n      emphasizedBackground: {\n        color: alpha(WindowsColors.Yellow30, windowsLlamaUnderlineBackgroundAlpha),\n      },\n    },\n    writingExpert: {\n      // Not actually present in Grammarly.UI.Classic.Common/Styles/Outcomes.xaml, just my best interpolation/guess\n      underline: {\n        color: WindowsColors.Green50,\n        style: 'ellipsis',\n        thickness: windowsLlamaUnderlineThickness,\n        align: windowsLlamaUnderlineAlignment,\n      },\n      emphasizedUnderline: {\n        color: WindowsColors.Green50,\n        style: 'ellipsis',\n        thickness: windowsLlamaUnderlineThickness,\n        align: windowsLlamaUnderlineAlignment,\n      },\n      emphasizedBackground: {\n        color: alpha(WindowsColors.Neutral50, windowsLlamaUnderlineBackgroundAlpha),\n      },\n    },\n    correctness: {\n      underline: {\n        color: alpha(WindowsColors.Red30, windowsLlamaNonEmphasizedUnderlineAlpha),\n        style: 'solid',\n        thickness: windowsLlamaUnderlineThickness,\n        align: windowsLlamaUnderlineAlignment,\n      },\n      emphasizedUnderline: {\n        color: WindowsColors.Red50,\n        style: 'solid',\n        thickness: windowsLlamaUnderlineThickness,\n        align: windowsLlamaUnderlineAlignment,\n      },\n      emphasizedBackground: {\n        color: alpha(WindowsColors.Red30, windowsLlamaUnderlineBackgroundAlpha),\n      },\n    },\n    delivery: {\n      underline: {\n        color: alpha(WindowsColors.Purple30, windowsLlamaNonEmphasizedUnderlineAlpha),\n        style: 'solid',\n        thickness: windowsLlamaUnderlineThickness,\n        align: windowsLlamaUnderlineAlignment,\n      },\n      emphasizedUnderline: {\n        color: WindowsColors.Purple50,\n        style: 'solid',\n        thickness: windowsLlamaUnderlineThickness,\n        align: windowsLlamaUnderlineAlignment,\n      },\n      emphasizedBackground: {\n        color: alpha(WindowsColors.Purple30, windowsLlamaUnderlineBackgroundAlpha),\n      },\n    },\n    clarity: {\n      underline: {\n        color: alpha(WindowsColors.Blue30, windowsLlamaNonEmphasizedUnderlineAlpha),\n        style: 'solid',\n        thickness: windowsLlamaUnderlineThickness,\n        align: windowsLlamaUnderlineAlignment,\n      },\n      emphasizedUnderline: {\n        color: WindowsColors.Blue50,\n        style: 'solid',\n        thickness: windowsLlamaUnderlineThickness,\n        align: windowsLlamaUnderlineAlignment,\n      },\n      emphasizedBackground: {\n        color: alpha(WindowsColors.Blue30, windowsLlamaUnderlineBackgroundAlpha),\n      },\n    },\n    engagement: {\n      underline: {\n        color: alpha(WindowsColors.Green30, windowsLlamaNonEmphasizedUnderlineAlpha),\n        style: 'solid',\n        thickness: windowsLlamaUnderlineThickness,\n        align: windowsLlamaUnderlineAlignment,\n      },\n      emphasizedUnderline: {\n        color: WindowsColors.Green50,\n        style: 'solid',\n        thickness: windowsLlamaUnderlineThickness,\n        align: windowsLlamaUnderlineAlignment,\n      },\n      emphasizedBackground: {\n        color: alpha(WindowsColors.Green30, windowsLlamaUnderlineBackgroundAlpha),\n      },\n    },\n    originality: {\n      // Not actually present in Grammarly.UI.Classic.Common/Styles/Outcomes.xaml, just my best interpolation/guess\n      underline: {\n        color: alpha(WindowsColors.Cyan30, windowsLlamaNonEmphasizedUnderlineAlpha),\n        style: 'solid',\n        thickness: windowsLlamaUnderlineThickness,\n        align: windowsLlamaUnderlineAlignment,\n      },\n      emphasizedUnderline: {\n        color: WindowsColors.Cyan60,\n        style: 'solid',\n        thickness: windowsLlamaUnderlineThickness,\n        align: windowsLlamaUnderlineAlignment,\n      },\n      emphasizedBackground: {\n        color: alpha(WindowsColors.Cyan30, windowsLlamaUnderlineBackgroundAlpha),\n      },\n    },\n    knowledgeHub: {\n      background: {\n        color: alpha(WindowsColors.Green40, 0.3),\n      },\n      emphasizedBackground: {\n        color: alpha(WindowsColors.Green40, 0.5),\n      },\n    },\n    other: {\n      // Not actually present in Grammarly.UI.Classic.Common/Styles/Outcomes.xaml, just my best interpolation/guess\n      // Using colors for StyleGuide/KnowledgeHub\n      underline: {\n        color: alpha(WindowsColors.Neutral40, windowsLlamaNonEmphasizedUnderlineAlpha),\n        style: 'solid',\n        thickness: windowsLlamaUnderlineThickness,\n        align: windowsLlamaUnderlineAlignment,\n      },\n      emphasizedUnderline: {\n        color: WindowsColors.Neutral50,\n        style: 'solid',\n        thickness: windowsLlamaUnderlineThickness,\n        align: windowsLlamaUnderlineAlignment,\n      },\n      emphasizedBackground: {\n        color: alpha(WindowsColors.Neutral40, windowsLlamaUnderlineBackgroundAlpha),\n      },\n    },\n  }))()\n\n/**\n * @internal\n * Text decoration style using GDS colors.\n */\nexport function getTextDecorationStyle(\n  alert: Pick<RawCAPIAlert, 'cardLayout' | 'group' | 'hidden' | 'extra_properties'>,\n): DecorationStyle {\n  return regularTextDecorationStyle[getAlertKind(alert) ?? 'other']\n}\n\n/**\n * @internal\n * A version of getTextDecorationStyle that matches windows-llama as closely as possible\n */\nexport function getWindowsLlamaTextDecorationStyle(\n  alert: Pick<RawCAPIAlert, 'cardLayout' | 'group' | 'hidden' | 'extra_properties'>,\n): DecorationStyle {\n  return windowsLlamaTextDecorationStyle[getAlertKind(alert) ?? 'other']\n}\n\nfunction alpha(color: CSSHexColor, alpha: number): CSSHexColor {\n  return color.length === 7\n    ? ((color +\n        Math.round(alpha * 255)\n          .toString(16)\n          .padStart(2, '0')) as CSSHexColor)\n    : color\n}\n","import type { CAPISuggestion, CAPISuggestionCollection } from '@grammarly/feature-capi-suggestion'\nimport type { TextDocument } from '@grammarly/feature-document-session'\nimport type {\n  Suggestion,\n  SuggestionCollectionChange,\n  SuggestionId,\n} from '@grammarly/feature-suggestion'\nimport type {\n  BackgroundRenderOptions,\n  TextDecoration,\n  TextDecorationId,\n  TextDecorationSegment,\n  TextDecorationSegmentCreateOptions,\n  TextDecorationSegmentId,\n  TextDecorationSegmentPointerEvent,\n  TextDecorationStore,\n  UnderlineRenderOptions,\n} from '@grammarly/feature-text-decoration'\nimport { NonEmptyArray } from '@grammarly/util-array'\nimport type { RawCAPIAlert } from '@grammarly/util-capi-alert'\nimport type { CAPIConnection } from '@grammarly/util-capi-client'\nimport type { EventMessageId, TransformJson } from '@grammarly/util-capi-protocol'\nimport { defineDebugView } from '@grammarly/util-debugging'\nimport { createDisposable, dispose } from '@grammarly/util-disposable'\nimport { CustomError, UnreachableCaseError } from '@grammarly/util-error'\nimport { identity, isNonNullable, pipe, sideEffect } from '@grammarly/util-function'\nimport { Point, Rect, WindowPoint, WindowRect } from '@grammarly/util-geometry'\nimport { isDev } from '@grammarly/util-is-dev'\nimport { collect, concat, filter, map, take, toArray } from '@grammarly/util-iterable'\nimport { logger, type Logger } from '@grammarly/util-logging'\nimport { Rx, timeoutWith } from '@grammarly/util-reactive'\nimport { AsyncResult } from '@grammarly/util-result'\nimport { TextRangeUpdateSemantics, TextRevision } from '@grammarly/util-text'\nimport {\n  getTextDecorationStyle,\n  getWindowsLlamaTextDecorationStyle,\n  type DecorationStyle,\n} from './getTextDecorationStyle'\nimport type {\n  TextDecorationController,\n  TextDecorationInteractionEvent,\n  TextDecorationInteractionObserver,\n  TextDecorationVisibilityChangeRequest,\n  TextDecorationVisibilityInfo,\n  TextDecorationVisibilitySource,\n} from './TextDecorationController'\n\ninterface CAPITextDecorationSegmentMeta {\n  readonly kind: 'main' | 'enclosing'\n  readonly style: DecorationStyle\n  readonly hasEnclosing: boolean\n  readonly isSuperAlert: boolean\n}\n\nexport interface CAPITextDecorationMeta {\n  readonly capiAlertId: RawCAPIAlert['id']\n  readonly suggestionId: SuggestionId\n}\n\ntype CAPITextDecoration = TextDecoration<CAPITextDecorationMeta, CAPITextDecorationSegmentMeta>\n\nexport type CAPITextDecorationStore = TextDecorationStore<\n  CAPITextDecorationMeta,\n  CAPITextDecorationSegmentMeta\n>\n\ninterface TextDecorationVisibilityChange {\n  readonly decorationId: TextDecorationId\n  readonly visibility: 'hidden' | 'visible' | 'emphasized'\n}\n\n/**\n * Responsible for managing inline CAPI text decorations.\n * - Adds/updates/deletes CAPI Text decorations when CAPI suggestions change.\n * - Consumes external visibility sources to control the visibility of decorations.\n * - Emits decoration interaction events to external observers.\n * - Sends RENDERED feedback to CAPI when CAPI text decorations are first rendered.\n * - Hides all decorations when the document loses focus, and removes all hide reason when it regains focus.\n * @internal\n */\nexport class CAPITextDecorationManager implements TextDecorationController, AsyncDisposable {\n  readonly #logger: Logger\n  readonly #disposables = new AsyncDisposableStack()\n  readonly #decorationStore: TextDecorationStore<\n    CAPITextDecorationMeta,\n    CAPITextDecorationSegmentMeta\n  >\n  readonly #capiSuggestionCollection: CAPISuggestionCollection\n  readonly #textDocument: Pick<TextDocument, 'id' | 'hasFocus' | 'geometry'>\n  readonly #visibleDecorations = new Set<TextDecorationId>()\n  readonly #decorationsStyle: 'windows' | 'regular' = 'windows'\n  #focusedDecoration: {\n    readonly decorationId: TextDecorationId\n    readonly segmentId?: TextDecorationSegmentId\n  } | null = null\n  #hoveredDecorationId: TextDecorationId | null = null\n  #lastInteractedSegmentId: TextDecorationSegmentId | undefined = undefined\n  readonly #capiConnection: Pick<CAPIConnection, 'status' | 'send'>\n  readonly #alreadyLoggedRenderedFeedback: Set<EventMessageId> = new Set()\n  readonly #interactionObservers = new Set<{\n    readonly observer: TextDecorationInteractionObserver\n    readonly predicate: (event: TextDecorationInteractionEvent) => boolean\n  }>()\n  #unhandledInteractionObserver: TextDecorationInteractionObserver | null = null\n\n  constructor(\n    capiSuggestionCollection: CAPISuggestionCollection,\n    decorationStore: CAPITextDecorationStore,\n    textDocument: Pick<TextDocument, 'id' | 'hasFocus' | 'geometry'>,\n    capiConnection: Pick<CAPIConnection, 'status' | 'send'>,\n  ) {\n    this.#logger = logger.createLogger('CAPITextDecorationManager', textDocument.id)\n    this.#capiSuggestionCollection = capiSuggestionCollection\n    this.#decorationStore = decorationStore\n    this.#capiConnection = capiConnection\n    this.#textDocument = textDocument\n  }\n\n  init() {\n    this.#disposables.use(\n      pipe(\n        Rx.fromSubscribable(this.#capiSuggestionCollection.onChange),\n        pipe(NonEmptyArray.from(this.#capiSuggestionCollection.getAll()), suggestions =>\n          suggestions ? Rx.startWith({ upserted: suggestions }) : identity,\n        ),\n        Rx.subscribe(change => this.#handleSuggestionChange(change)),\n      ),\n    )\n\n    this.#setupDecorationsInteractivity()\n\n    this.#disposables.use(\n      pipe(\n        Rx.fromSubscribableState(this.#textDocument.hasFocus),\n        Rx.subscribe(hasFocus => this.#handleDocumentFocusChange(hasFocus)),\n      ),\n    )\n\n    // On reconnects, clear the set of already-logged-rendered alerts.\n    this.#disposables.use(\n      pipe(\n        Rx.fromSubscribableState(this.#capiConnection.status),\n        Rx.filter(status => status.kind === 'connected' && status.isNewSession),\n        Rx.subscribe(() => this.#alreadyLoggedRenderedFeedback.clear()),\n      ),\n    )\n\n    defineDebugView(this, () => ({\n      decorationStore: this.#decorationStore,\n      visibleDecorations: this.#visibleDecorations,\n    }))\n\n    this.#disposables.use(\n      this.#decorationStore.visibleOnscreenDecorations.subscribe(visibleOnscreenDecorations => {\n        visibleOnscreenDecorations.forEach(decoration =>\n          this.#logRenderedFeedbackIfFirstTimeSeen(decoration.metadata.capiAlertId),\n        )\n\n        this.#logger.verbose('Visible onscreen decorations', {\n          documentID: this.#textDocument.id,\n          visibleOnscreen: pipe(\n            visibleOnscreenDecorations,\n            map(decoration => decoration.id),\n            toArray,\n          ),\n        })\n      }),\n    )\n  }\n\n  addVisibilitySource(visibilityChanges: TextDecorationVisibilitySource): Disposable {\n    const visibleDecorations = new Set<TextDecorationId>()\n\n    const disposable = pipe(\n      Rx.fromSubscribable(visibilityChanges),\n      Rx.map(toPartialVisibilityChangeRequest(visibleDecorations)),\n      Rx.subscribe(changes => {\n        this.#logger.verbose('Update visibility', {\n          documentID: this.#textDocument.id,\n          changes,\n        })\n        const { toShow, toHide, toEmphasize } = groupAlertIdByVisibility(changes)\n\n        toHide.forEach(id => visibleDecorations.delete(id))\n        toShow.forEach(id => visibleDecorations.add(id))\n        toEmphasize.forEach(id => visibleDecorations.add(id))\n\n        void this.#applyVisibilityChanges({ toHide, toShow, toEmphasize })\n      }),\n    )\n\n    // No need to clear decorations when the manager is disposed\n    this.#disposables.use(disposable)\n\n    return createDisposable(() => {\n      // Clear decorations if this visibility source is disposed\n      void this.#applyVisibilityChanges({\n        toHide: visibleDecorations,\n        toShow: new Set(),\n        toEmphasize: new Set(),\n      })\n      // Then unsubscribe from the visibility stream\n      dispose(disposable)\n    })\n  }\n\n  onTextDecorationInteraction(\n    observer: TextDecorationInteractionObserver,\n    predicate: (event: TextDecorationInteractionEvent) => boolean,\n  ): Disposable {\n    const observerAndPredicate = { observer, predicate }\n    this.#interactionObservers.add(observerAndPredicate)\n    return createDisposable(() => this.#interactionObservers.delete(observerAndPredicate))\n  }\n\n  onUnhandledTextDecorationInteraction(observer: TextDecorationInteractionObserver): Disposable {\n    if (this.#unhandledInteractionObserver) {\n      if (isDev) {\n        throw new CustomError(\n          'An observer is already registered for unhandled text decoration interactions',\n        )\n      }\n      this.#logger.warn('Overwriting unhandledInteractionObserver')\n    }\n    this.#unhandledInteractionObserver = observer\n    return createDisposable(() => (this.#unhandledInteractionObserver = null))\n  }\n\n  #logRenderedFeedbackIfFirstTimeSeen(alertId: EventMessageId) {\n    if (this.#alreadyLoggedRenderedFeedback.has(alertId)) return\n    this.#alreadyLoggedRenderedFeedback.add(alertId)\n\n    void pipe(\n      this.#capiConnection.send({\n        action: 'feedback',\n        type: 'RENDERED',\n        subtype: 'inline',\n        alertId,\n      }),\n      AsyncResult.mapError(\n        sideEffect(error =>\n          this.#logger.error(`Failed to send RENDERED feedback for alert ${alertId}`, error),\n        ),\n      ),\n    )\n  }\n\n  #handleSuggestionChange(change: SuggestionCollectionChange<'capi'>) {\n    const removals = change.removed ?? []\n    const upserts = change.upserted ?? []\n\n    void AsyncResult.all([\n      // Handle removals\n      pipe(\n        this.#decorationStore.delete(\n          removals.map(suggestion => suggestionToDecorationId(suggestion)),\n        ),\n        AsyncResult.map(\n          sideEffect(() => {\n            if (removals.length > 0) {\n              this.#logger.verbose('Removed decorations for alerts', {\n                documentID: this.#textDocument.id,\n                decorationIds: removals.map(s => suggestionToDecorationId(s)),\n                alertIds: removals.map(s => s.id),\n              })\n            }\n          }),\n        ),\n        AsyncResult.mapError(\n          sideEffect(error =>\n            this.#logger.error(\n              'Failed to remove decoration on suggestion removal',\n              new DecorationRemovalError(\n                error,\n                removals.map(s => s.id),\n              ),\n            ),\n          ),\n        ),\n      ),\n      // Handle upserts\n      pipe(\n        AsyncResult.all(upserts.map(suggestion => this.#upsertDecorationForSuggestion(suggestion))),\n        AsyncResult.map(\n          sideEffect(() => {\n            if (upserts.length > 0) {\n              this.#logger.verbose('Upserted decorations for alerts', {\n                documentID: this.#textDocument.id,\n                decorationIds: upserts.map(s => suggestionToDecorationId(s)),\n                alertIds: upserts.map(s => s.id),\n              })\n            }\n          }),\n        ),\n        AsyncResult.mapError(\n          sideEffect(error =>\n            this.#logger.error(\n              'Failed to upsert decoration on suggestion upsert',\n              new DecorationUpsertError(\n                error,\n                upserts.map(s => s.id),\n              ),\n            ),\n          ),\n        ),\n      ),\n    ])\n  }\n\n  #handleDocumentFocusChange(hasFocus: boolean) {\n    if (hasFocus) {\n      this.#logger.verbose('Got focus - show all decorations', {\n        documentID: this.#textDocument.id,\n      })\n      void pipe(\n        this.#decorationStore.removeHideAllReasons([\n          'documentLostFocus',\n          'documentScrolling',\n          'windowMoving',\n          'windowResizing',\n          'geometryUpdateLatencyTooHigh',\n        ]),\n        AsyncResult.mapError(\n          sideEffect(error =>\n            this.#logger.error('Unexpected error when removing all hideAllReasons', error),\n          ),\n        ),\n      )\n    } else {\n      this.#logger.verbose('Lost focus - hide all decorations', {\n        documentID: this.#textDocument.id,\n      })\n      void pipe(\n        this.#decorationStore.addHideAllReasons(['documentLostFocus']),\n        AsyncResult.mapError(\n          sideEffect(error =>\n            this.#logger.error(\n              \"Unexpected error when adding 'documentLostFocus' hideAllReason\",\n              error,\n            ),\n          ),\n        ),\n      )\n    }\n  }\n\n  async #applyVisibilityChanges({\n    toHide,\n    toShow,\n    toEmphasize,\n  }: {\n    readonly toHide: ReadonlySet<TextDecorationId>\n    readonly toShow: ReadonlySet<TextDecorationId>\n    readonly toEmphasize: ReadonlySet<TextDecorationId>\n  }) {\n    const asyncResults: AsyncResult<void>[] = []\n\n    asyncResults.push(this.#decorationStore.setVisibility(toHide, false))\n    asyncResults.push(this.#decorationStore.setVisibility(toShow, true))\n\n    toHide.forEach(id => this.#visibleDecorations.delete(id))\n    toShow.forEach(id => this.#visibleDecorations.add(id))\n    toEmphasize.forEach(id => this.#visibleDecorations.add(id))\n\n    const firstEmphasized = pipe(toEmphasize, take(1), toArray).at(0)\n    if (firstEmphasized) {\n      // If focus didn't change, nothing to do\n      if (firstEmphasized === this.#focusedDecoration?.decorationId) return\n      // otherwise, set focus\n      asyncResults.push(this.#decorationStore.focus(firstEmphasized, this.#lastInteractedSegmentId))\n    } else if (\n      // If we get here, no emphasis is requested, so we check if we should reset the\n      // current emphasis if the emphasized alert is transitioned to visible.\n      this.#focusedDecoration?.decorationId !== undefined &&\n      toShow.has(this.#focusedDecoration.decorationId)\n    ) {\n      // Then reset focus to null\n      asyncResults.push(this.#decorationStore.focus(null))\n    }\n\n    await timeoutWith(\n      pipe(\n        AsyncResult.all(asyncResults),\n        AsyncResult.mapError(\n          sideEffect(error =>\n            this.#logger.error('Unexpected error when applying visibility changes', error),\n          ),\n        ),\n      ),\n      {\n        timeoutMs: 5000,\n        defaultValue: undefined,\n        onTimeout: () => this.#logger.warn('Timeout out when applying visibility changes'),\n      },\n    )\n  }\n\n  #upsertDecorationForSuggestion(suggestion: CAPISuggestion): AsyncResult<CAPITextDecoration> {\n    const id = suggestionToDecorationId(suggestion)\n    const focused = this.#focusedDecoration?.decorationId === id\n\n    return this.#decorationStore.upsert({\n      id,\n      revision: TextRevision.create(suggestion.alert.rev),\n      segments: extractUnderlineSegments(\n        suggestion.alert,\n        this.#getDecorationsStyle(suggestion.alert),\n        focused,\n        suggestion.alert.transformJson,\n      ),\n      visibility: focused\n        ? 'focused'\n        : this.#visibleDecorations.has(id)\n          ? 'visible'\n          : // We don't show decorations until the host tells us to.\n            'hidden',\n      metadata: { capiAlertId: suggestion.alert.id, suggestionId: suggestion.id },\n    })\n  }\n\n  #getDecorationsStyle(alert: RawCAPIAlert): DecorationStyle {\n    if (this.#decorationsStyle === 'windows') {\n      return getWindowsLlamaTextDecorationStyle(alert)\n    } else if (this.#decorationsStyle === 'regular') {\n      return getTextDecorationStyle(alert)\n    } else {\n      throw new UnreachableCaseError(this.#decorationsStyle)\n    }\n  }\n\n  #setupDecorationsInteractivity() {\n    this.#disposables.use(\n      this.#decorationStore.onPointerHoverChange.subscribe(({ pointerEnter, pointerLeave }) => {\n        if (pointerEnter) {\n          // Skip enter on already hovered decoration, do not send event to connector\n          if (this.#hoveredDecorationId === pointerEnter.decoration.id) return\n\n          this.#hoveredDecorationId = pointerEnter.decoration.id\n          this.#lastInteractedSegmentId = pointerEnter.segment.id\n          this.#sendPointerEventToController(pointerEnter)\n        }\n        if (pointerLeave) {\n          if (\n            // We are leaving the currently hovered decoration\n            this.#hoveredDecorationId === pointerLeave.decoration.id &&\n            // And we are not re-entering the same decoration\n            pointerEnter?.decoration.id !== this.#hoveredDecorationId\n          ) {\n            // Then send the pointer leave event to the connector\n            this.#hoveredDecorationId = null\n            this.#lastInteractedSegmentId = undefined\n            this.#sendPointerEventToController(pointerLeave)\n          }\n        }\n      }),\n    )\n    this.#disposables.use(\n      this.#decorationStore.onPointerClick.subscribe(event => {\n        this.#lastInteractedSegmentId = event.segment.id\n        this.#sendPointerEventToController(event)\n      }),\n    )\n\n    // Emphasize or de-emphasize on focus change\n    this.#disposables.use(\n      this.#decorationStore.onFocusChange.subscribe(({ decoration, segment, focused }) => {\n        if (focused) {\n          this.#focusedDecoration = { decorationId: decoration.id, segmentId: segment?.id }\n          this.#emphasizeDecoration(decoration, segment)\n        } else {\n          if (this.#focusedDecoration?.decorationId === decoration.id) {\n            this.#focusedDecoration = null\n          }\n          this.#deemphasizeDecoration(decoration)\n        }\n      }),\n    )\n  }\n\n  #emphasizeDecoration(\n    decoration: CAPITextDecoration,\n    segmentHoveredOrSelected?: TextDecorationSegment<CAPITextDecorationSegmentMeta>,\n  ) {\n    decoration.segments.forEach(s =>\n      s.patch(\n        styleDecorationSegment({\n          segmentMeta: s.metadata,\n          segmentFocused: s.id === segmentHoveredOrSelected?.id,\n          decorationFocused: true,\n        }),\n      ),\n    )\n  }\n\n  #deemphasizeDecoration(decoration: CAPITextDecoration) {\n    decoration.segments.forEach(s =>\n      s.patch(\n        styleDecorationSegment({\n          segmentMeta: s.metadata,\n          segmentFocused: false,\n          decorationFocused: false,\n        }),\n      ),\n    )\n  }\n\n  #sendPointerEventToController({\n    kind,\n    rect,\n    decorationRects,\n    position,\n    decoration,\n  }: TextDecorationSegmentPointerEvent<CAPITextDecorationMeta, CAPITextDecorationSegmentMeta>) {\n    if (kind === 'pointerUp' || kind === 'pointerDown') return\n\n    this.#logger.verbose('Sending pointer event', {\n      kind,\n      decoration: decoration.id,\n      documentID: this.#textDocument.id,\n    })\n\n    const geometry = this.#textDocument.geometry.getValue().geometry\n    const viewportToWindowOffset = {\n      x: geometry?.viewportFrame.x ?? 0,\n      y: geometry?.viewportFrame.y ?? 0,\n    }\n    const translateRect = Rect.translate(viewportToWindowOffset)\n    const interactionEvent = {\n      kind,\n      decorationId: decoration.id,\n      suggestionId: decoration.metadata.suggestionId,\n      position: WindowPoint.create(Point.translate(viewportToWindowOffset)(position)),\n      rect: WindowRect.create(translateRect(rect)),\n      decorationRects: decorationRects.map(rect => WindowRect.create(translateRect(rect))),\n    }\n\n    let handled = false\n\n    pipe(\n      this.#interactionObservers,\n      // First execute the predicate observers\n      filter(({ predicate }) => predicate(interactionEvent)),\n      map(sideEffect(() => (handled = true))),\n      map(({ observer }) => observer(interactionEvent)),\n      // Then if the event was not handled, run the \"unhandled\" observer\n      concat(\n        !handled && this.#unhandledInteractionObserver\n          ? [this.#unhandledInteractionObserver(interactionEvent)]\n          : [],\n      ),\n      collect,\n    )\n  }\n\n  async [Symbol.asyncDispose]() {\n    await this.#disposables.disposeAsync()\n  }\n}\n\nexport function styleDecorationSegment({\n  segmentMeta,\n  segmentFocused,\n  decorationFocused,\n}: {\n  readonly segmentMeta: CAPITextDecorationSegmentMeta\n  readonly segmentFocused: boolean\n  readonly decorationFocused: boolean\n}): {\n  readonly underline: UnderlineRenderOptions | null\n  readonly background: BackgroundRenderOptions | null\n  readonly interactive: boolean\n} {\n  if (decorationFocused) {\n    return {\n      // All segments will report pointer-events when emphasized\n      interactive: true,\n      background:\n        // if the decoration has an enclosing segment, then show the background on that segment only\n        !segmentMeta.hasEnclosing || segmentMeta.kind === 'enclosing'\n          ? segmentMeta.style.emphasizedBackground ?? segmentMeta.style.background ?? null\n          : null,\n      underline:\n        // For super-alerts, hide underlines on the non-focused segments\n        segmentMeta.isSuperAlert && !segmentFocused\n          ? null\n          : // otherwise, only show the underline for non-enclosing segments\n            segmentMeta.kind !== 'enclosing'\n            ? segmentMeta.style.emphasizedUnderline ?? segmentMeta.style.underline ?? null\n            : null,\n    }\n  } else {\n    return {\n      // enclosing segments should not report user-events when the decoration is not emphasized (they are transparent)\n      interactive: segmentMeta.kind !== 'enclosing',\n      background: segmentMeta.style.background ?? null,\n      underline: segmentMeta.kind === 'enclosing' ? null : segmentMeta.style.underline ?? null,\n    }\n  }\n}\n\nfunction toPartialVisibilityChangeRequest(\n  visibleDecorations: ReadonlySet<TextDecorationId>,\n): (changeRequest: TextDecorationVisibilityChangeRequest) => TextDecorationVisibilityChange[] {\n  return changeRequest => {\n    const toDecorationId = (id: TextDecorationVisibilityInfo['id']) =>\n      id.kind === 'decoration' ? id.decorationId : suggestionToDecorationId({ id: id.suggestionId })\n    if (changeRequest.partial) {\n      return changeRequest.changes.map(change => ({\n        decorationId: toDecorationId(change.id),\n        visibility: change.visibility,\n      }))\n    } else {\n      const toShowOrEmphasize = new Set(\n        changeRequest.changes.flatMap(change =>\n          change.visibility === 'hidden' ? [] : [toDecorationId(change.id)],\n        ),\n      )\n      const noLongerVisible = pipe(\n        visibleDecorations.difference(toShowOrEmphasize),\n        map(decorationId => ({\n          decorationId,\n          visibility: 'hidden' as const,\n        })),\n        toArray,\n      )\n      return changeRequest.changes\n        .map(change => ({\n          decorationId: toDecorationId(change.id),\n          visibility: change.visibility,\n        }))\n        .concat(noLongerVisible)\n    }\n  }\n}\n\nfunction groupAlertIdByVisibility(changes: readonly TextDecorationVisibilityChange[]) {\n  const toShow = new Set<TextDecorationId>()\n  const toHide = new Set<TextDecorationId>()\n  const toEmphasize = new Set<TextDecorationId>()\n\n  for (const change of changes) {\n    if (change.visibility === 'hidden') {\n      toHide.add(change.decorationId)\n    } else if (change.visibility === 'visible') {\n      toShow.add(change.decorationId)\n    } else if (change.visibility === 'emphasized') {\n      toShow.add(change.decorationId)\n      toEmphasize.add(change.decorationId)\n    } else {\n      throw new UnreachableCaseError(change.visibility)\n    }\n  }\n  return { toShow, toHide, toEmphasize }\n}\n\nfunction suggestionToDecorationId(suggestion: Pick<Suggestion, 'id'>): TextDecorationId {\n  return String(suggestion.id) as TextDecorationId\n}\n\nfunction extractUnderlineSegments(\n  alert: Pick<RawCAPIAlert, 'subalerts' | 'cardLayout' | 'group' | 'hidden' | 'extra_properties'>,\n  style: DecorationStyle,\n  focused: boolean,\n  transformJson?: TransformJson,\n  isSuperAlert?: boolean,\n): TextDecorationSegmentCreateOptions<CAPITextDecorationSegmentMeta>[] {\n  if (transformJson) {\n    return transformJson.highlights.map(({ type, s, e }, _, highlights) => {\n      const segmentMeta = {\n        kind: type === 'enclosing' ? 'enclosing' : 'main',\n        hasEnclosing: highlights.some(h => h.type === 'enclosing'),\n        isSuperAlert: isSuperAlert === true,\n        style,\n      } satisfies CAPITextDecorationSegmentMeta\n\n      const { interactive, underline, background } = styleDecorationSegment({\n        // NOTE: segments may not be stable across decoration upserts,\n        // so their id is constructed internally. Here we assume the segment is unfocused on upsert\n        // as we can't compare to the focused segment id.\n        segmentFocused: false,\n        decorationFocused: focused,\n        segmentMeta,\n      })\n\n      return {\n        range: {\n          start: s + (transformJson?.context.s ?? 0),\n          end: e + (transformJson?.context.s ?? 0),\n        },\n        updateSemantics: TextRangeUpdateSemantics.Resize,\n        metadata: segmentMeta,\n        interactive,\n        underline: underline ?? undefined,\n        background: background ?? undefined,\n      }\n    })\n  } else if (alert.subalerts) {\n    return alert.subalerts\n      .flatMap(subalert =>\n        extractUnderlineSegments(alert, style, focused, subalert.transformJson, true),\n      )\n      .filter(isNonNullable)\n  } else {\n    return []\n  }\n}\n\nclass DecorationUpsertError extends CustomError {\n  readonly suggestions: readonly SuggestionId[]\n\n  constructor(cause: Error, suggestions: Iterable<SuggestionId>) {\n    super('Failed to upsert decoration', cause)\n    this.suggestions = Array.from(suggestions)\n  }\n\n  override toJSON() {\n    return { ...super.toJSON(), suggestions: this.suggestions }\n  }\n}\n\nclass DecorationRemovalError extends CustomError {\n  readonly suggestions: readonly SuggestionId[]\n\n  constructor(cause: Error, suggestions: Iterable<SuggestionId>) {\n    super('Failed to remove decoration', cause)\n    this.suggestions = Array.from(suggestions)\n  }\n\n  override toJSON() {\n    return { ...super.toJSON(), suggestions: this.suggestions }\n  }\n}\n","/**\n * This feature package is responsible for creating decorations from CAPI suggestions.\n * @packageDocumentation\n */\n\nimport type {\n  Activate,\n  ExecutionScope,\n  ExecutionScopeDefinition,\n  Feature,\n} from '@grammarly/feature'\nimport { createInjectionToken, defineFactory, Lifetime } from '@grammarly/util-dependency-container'\nimport { createDisposable } from '@grammarly/util-disposable'\nimport { constVoid, pipe } from '@grammarly/util-function'\nimport { Rect } from '@grammarly/util-geometry'\nimport { logger } from '@grammarly/util-logging'\nimport { Rx } from '@grammarly/util-reactive'\nimport { Result, ResultDisposable } from '@grammarly/util-result'\nimport { AppWindowToken } from '@grammarly/util-window-management'\nimport {\n  CAPITextDecorationManager,\n  type CAPITextDecorationStore,\n} from './CAPITextDecorationManager'\nimport type { TextDecorationController } from './TextDecorationController'\n\nexport type {\n  TextDecorationController,\n  TextDecorationInteractionEvent,\n  TextDecorationInteractionObserver,\n  TextDecorationVisibilityChangeRequest,\n  TextDecorationVisibilityInfo,\n  TextDecorationVisibilitySource,\n} from './TextDecorationController'\n\nimport type {} from '@grammarly/feature-capi'\nimport type {} from '@grammarly/feature-capi-suggestion'\nimport type {} from '@grammarly/feature-document-session'\nimport type { TextDecorationStoreId } from '@grammarly/feature-text-decoration'\n\n/**\n * TextDecorationController token.\n * @public\n */\nexport const TextDecorationControllerToken = createInjectionToken<TextDecorationController>(\n  Symbol('TextDecorationController'),\n)\n\n/** @internal */\nconst CAPITextDecorationStoreToken = createInjectionToken<CAPITextDecorationStore>(\n  Symbol('CAPITextDecorationStore'),\n)\n\n/** @public */\nexport const activate: Activate = context =>\n  pipe(\n    Result.all([\n      context.getExecutionScope('document-session'),\n      context.getFeature('document-session'),\n      context.getFeature('capi-suggestion'),\n      context.getFeature('text-decoration'),\n      context.getFeature('capi'),\n    ] as const),\n    Result.flatMap(\n      ([\n        documentSessionScope,\n        documentSessionFeature,\n        capiSuggestionFeature,\n        textDecorationFeature,\n        capiFeature,\n      ]) =>\n        ResultDisposable.all([\n          ...registerDependencies(\n            documentSessionScope,\n            textDecorationFeature,\n            capiSuggestionFeature,\n            documentSessionFeature,\n            capiFeature,\n          ),\n          Result.success(\n            documentSessionScope.onStart(async execution =>\n              ResultDisposable.all([\n                hideWindowWhenNoDocumentIsActive(execution, documentSessionFeature),\n                pipe(\n                  execution.resolve(CAPITextDecorationManager),\n                  Result.map(manager => manager.init()),\n                  Result.map(() => createDisposable(constVoid)),\n                ),\n              ]),\n            ),\n          ),\n        ]),\n    ),\n  )\n\nfunction registerDependencies(\n  documentSessionScope: ExecutionScopeDefinition<'document-session'>,\n  textDecorationFeature: Feature<'text-decoration'>,\n  capiSuggestionFeature: Feature<'capi-suggestion'>,\n  documentSessionFeature: Feature<'document-session'>,\n  capiFeature: Feature<'capi'>,\n) {\n  return [\n    documentSessionScope.register({\n      token: TextDecorationControllerToken,\n      useToken: CAPITextDecorationManager,\n    }),\n    documentSessionScope.register(\n      {\n        token: CAPITextDecorationStoreToken,\n        useFactory: resolver =>\n          pipe(\n            resolver.resolve(textDecorationFeature.provides.TextDecorationManager),\n            Result.map(textDecorationManager =>\n              textDecorationManager.createStore('capi' as TextDecorationStoreId),\n            ),\n          ),\n      },\n      { lifetime: Lifetime.ContainerScoped },\n    ),\n    documentSessionScope.register(\n      {\n        token: CAPITextDecorationManager,\n        useFactory: defineFactory(CAPITextDecorationManager, [\n          capiSuggestionFeature.provides.CAPISuggestionCollection,\n          CAPITextDecorationStoreToken,\n          documentSessionFeature.provides.TextDocument,\n          capiFeature.provides.CAPIConnection,\n        ]),\n      },\n      { lifetime: Lifetime.ContainerScoped },\n    ),\n  ]\n}\n\nfunction hideWindowWhenNoDocumentIsActive(\n  execution: ExecutionScope<'document-session'>,\n  documentSessionFeature: Feature<'document-session'>,\n): ResultDisposable {\n  return pipe(\n    Result.all([\n      execution.resolve(documentSessionFeature.provides.DocumentSessionManager),\n      execution.resolve(AppWindowToken),\n    ] as const),\n    Result.map(([documentSessionManager, appWindow]) =>\n      pipe(\n        Rx.fromSubscribableState(documentSessionManager.activeDocumentId),\n        Rx.distinctUntilChanged(),\n        Rx.debounceTime(500), // to avoid hiding when switching documents\n        Rx.filter(activeDocumentId => activeDocumentId === null),\n        Rx.subscribe(() => {\n          logger.verbose(`No active document focused - hiding current window`)\n          void appWindow.setScreenRect(Rect.collapsed())\n        }),\n      ),\n    ),\n  )\n}\n"],"names":["Blue60","Gold30","Green40","Green80","NeutralGray60","Purple60","Red60","Teal80","getAlertKind","alert","_a","_b","_c","_d","_e","_f","_g","regularUnderlineThickness","regularUnderlineAlignment","regularUnderlineBackgroundAlpha","regularTextDecorationStyle","Tokens.Color.Gold30","alpha","Tokens.Color.Green80","Tokens.Color.NeutralGray60","Tokens.Color.Red60","Tokens.Color.Purple60","Tokens.Color.Blue60","Tokens.Color.Teal80","Tokens.Color.Green40","WindowsColors","windowsLlamaUnderlineThickness","windowsLlamaUnderlineAlignment","windowsLlamaUnderlineBackgroundAlpha","windowsLlamaNonEmphasizedUnderlineAlpha","windowsLlamaTextDecorationStyle","getTextDecorationStyle","getWindowsLlamaTextDecorationStyle","color","_logger","_disposables","_decorationStore","_capiSuggestionCollection","_textDocument","_visibleDecorations","_decorationsStyle","_focusedDecoration","_hoveredDecorationId","_lastInteractedSegmentId","_capiConnection","_alreadyLoggedRenderedFeedback","_interactionObservers","_unhandledInteractionObserver","_CAPITextDecorationManager_instances","logRenderedFeedbackIfFirstTimeSeen_fn","handleSuggestionChange_fn","handleDocumentFocusChange_fn","applyVisibilityChanges_fn","upsertDecorationForSuggestion_fn","getDecorationsStyle_fn","setupDecorationsInteractivity_fn","emphasizeDecoration_fn","deemphasizeDecoration_fn","sendPointerEventToController_fn","CAPITextDecorationManager","capiSuggestionCollection","decorationStore","textDocument","capiConnection","__privateAdd","__privateSet","logger","__privateGet","pipe","Rx","NonEmptyArray.from","suggestions","identity","change","__privateMethod","hasFocus","status","visibleOnscreenDecorations","decoration","map","toArray","visibilityChanges","visibleDecorations","disposable","toPartialVisibilityChangeRequest","changes","toShow","toHide","toEmphasize","groupAlertIdByVisibility","id","createDisposable","dispose","observer","predicate","observerAndPredicate","alertId","AsyncResult.mapError","sideEffect","error","removals","upserts","AsyncResult.all","suggestion","suggestionToDecorationId","AsyncResult.map","s","DecorationRemovalError","DecorationUpsertError","asyncResults","firstEmphasized","take","timeoutWith","focused","TextRevision.create","extractUnderlineSegments","UnreachableCaseError","pointerEnter","pointerLeave","event","segment","segmentHoveredOrSelected","styleDecorationSegment","kind","rect","decorationRects","position","geometry","viewportToWindowOffset","translateRect","Rect.translate","interactionEvent","Point.translate","handled","filter","concat","collect","segmentMeta","segmentFocused","decorationFocused","changeRequest","toDecorationId","toShowOrEmphasize","noLongerVisible","decorationId","style","transformJson","isSuperAlert","type","e","_","highlights","h","interactive","underline","background","TextRangeUpdateSemantics","subalert","isNonNullable","CustomError","cause","__publicField","TextDecorationControllerToken","createInjectionToken","CAPITextDecorationStoreToken","activate","context","Result.all","Result.flatMap","documentSessionScope","documentSessionFeature","capiSuggestionFeature","textDecorationFeature","capiFeature","ResultDisposable","registerDependencies","Result.success","execution","hideWindowWhenNoDocumentIsActive","Result.map","manager","constVoid","resolver","textDecorationManager","Lifetime","defineFactory","AppWindowToken","documentSessionManager","appWindow","activeDocumentId","Rect.collapsed"],"mappings":"krBAKA,MAAMA,GAAS,UAoBTC,GAAS,UAUTC,GAAU,UAEVC,EAAU,UAqBVC,EAAgB,UAUhBC,GAAW,UASXC,GAAQ,UAURC,GAAS,UClFf,SAASC,GAAaC,EAAO,mBACzB,OAAIA,EAAM,UAAUC,EAAAD,EAAM,mBAAN,YAAAC,EAAwB,gBAAiB,SAClD,gBAEFD,EAAM,QAAU,gBACd,kBAEFE,EAAAF,EAAM,aAAN,YAAAE,EAAkB,WAAY,cAC5B,gBAEFC,EAAAH,EAAM,aAAN,YAAAG,EAAkB,WAAY,OAC5B,aAEFC,EAAAJ,EAAM,aAAN,YAAAI,EAAkB,WAAY,UAC5B,YAEFC,EAAAL,EAAM,aAAN,YAAAK,EAAkB,WAAY,aAC5B,eAEFC,EAAAN,EAAM,aAAN,YAAAM,EAAkB,WAAY,cAC5B,gBAEFC,EAAAP,EAAM,aAAN,YAAAO,EAAkB,WAAY,gBAC5B,eAGA,IAEf,CChBA,MAAMC,EAA4B,EAC5BC,EAA4B,UAC5BC,EAAkC,IAElCC,GACoB,CACtB,cAAe,CACb,UAAW,CAET,MAAOC,GACP,MAAO,QACP,UAAWJ,EACX,MAAOC,CACT,EACA,qBAAsB,CAEpB,MAAOI,EAAMD,GAAqBF,CAA+B,CACnE,CACF,EACA,cAAe,CACb,UAAW,CAET,MAAOI,EACP,MAAO,WACP,UAAWN,EACX,MAAOC,CACT,EACA,qBAAsB,CAEpB,MAAOI,EAAME,EAA4BL,CAA+B,CAC1E,CACF,EACA,YAAa,CACX,UAAW,CAET,MAAOM,GACP,MAAO,QACP,UAAWR,EACX,MAAOC,CACT,EACA,qBAAsB,CAEpB,MAAOI,EAAMG,GAAoBN,CAA+B,CAClE,CACF,EACA,SAAU,CACR,UAAW,CAET,MAAOO,GACP,MAAO,QACP,UAAWT,EACX,MAAOC,CACT,EACA,qBAAsB,CAEpB,MAAOI,EAAMI,GAAuBP,CAA+B,CACrE,CACF,EACA,QAAS,CACP,UAAW,CAET,MAAOQ,GACP,MAAO,QACP,UAAWV,EACX,MAAOC,CACT,EACA,qBAAsB,CAEpB,MAAOI,EAAMK,GAAqBR,CAA+B,CACnE,CACF,EACA,WAAY,CACV,UAAW,CAET,MAAOI,EACP,MAAO,QACP,UAAWN,EACX,MAAOC,CACT,EACA,qBAAsB,CAEpB,MAAOI,EAAMC,EAAsBJ,CAA+B,CACpE,CACF,EACA,YAAa,CACX,UAAW,CAET,MAAOS,GACP,MAAO,QACP,UAAWX,EACX,MAAOC,CACT,EACA,qBAAsB,CAEpB,MAAOI,EAAMM,GAAqBT,CAA+B,CACnE,CACF,EACA,aAAc,CACZ,WAAY,CACV,MAAOG,EAAMO,GAAsB,EAAG,CACxC,EACA,qBAAsB,CACpB,MAAOP,EAAMO,GAAsB,EAAG,CACxC,CACF,EACA,MAAO,CACL,UAAW,CAET,MAAOL,EACP,MAAO,QACP,UAAWP,EACX,MAAOC,CACT,EACA,qBAAsB,CAEpB,MAAOI,EAAME,EAA4BL,CAA+B,CAC1E,CACF,CACF,EAGIW,EAAgB,CACpB,MAAO,UACP,MAAO,UACP,OAAQ,UACR,OAAQ,UACR,QAAS,UACT,QAAS,UACT,QAAS,UACT,SAAU,UACV,SAAU,UACV,SAAU,UACV,SAAU,UACV,UAAW,UACX,UAAW,UACX,OAAQ,UACR,OAAQ,SACV,EAEMC,EAAiC,EACjCC,EAAiC,UACjCC,EAAuC,GACvCC,EAA0C,GAE1CC,GACoB,CACtB,cAAe,CAEb,UAAW,CACT,MAAOb,EAAMQ,EAAc,SAAUI,CAAuC,EAC5E,MAAO,QACP,UAAWH,EACX,MAAOC,CACT,EACA,oBAAqB,CACnB,MAAOF,EAAc,SACrB,MAAO,QACP,UAAWC,EACX,MAAOC,CACT,EACA,qBAAsB,CACpB,MAAOV,EAAMQ,EAAc,SAAUG,CAAoC,CAC3E,CACF,EACA,cAAe,CAEb,UAAW,CACT,MAAOH,EAAc,QACrB,MAAO,WACP,UAAWC,EACX,MAAOC,CACT,EACA,oBAAqB,CACnB,MAAOF,EAAc,QACrB,MAAO,WACP,UAAWC,EACX,MAAOC,CACT,EACA,qBAAsB,CACpB,MAAOV,EAAMQ,EAAc,UAAWG,CAAoC,CAC5E,CACF,EACA,YAAa,CACX,UAAW,CACT,MAAOX,EAAMQ,EAAc,MAAOI,CAAuC,EACzE,MAAO,QACP,UAAWH,EACX,MAAOC,CACT,EACA,oBAAqB,CACnB,MAAOF,EAAc,MACrB,MAAO,QACP,UAAWC,EACX,MAAOC,CACT,EACA,qBAAsB,CACpB,MAAOV,EAAMQ,EAAc,MAAOG,CAAoC,CACxE,CACF,EACA,SAAU,CACR,UAAW,CACT,MAAOX,EAAMQ,EAAc,SAAUI,CAAuC,EAC5E,MAAO,QACP,UAAWH,EACX,MAAOC,CACT,EACA,oBAAqB,CACnB,MAAOF,EAAc,SACrB,MAAO,QACP,UAAWC,EACX,MAAOC,CACT,EACA,qBAAsB,CACpB,MAAOV,EAAMQ,EAAc,SAAUG,CAAoC,CAC3E,CACF,EACA,QAAS,CACP,UAAW,CACT,MAAOX,EAAMQ,EAAc,OAAQI,CAAuC,EAC1E,MAAO,QACP,UAAWH,EACX,MAAOC,CACT,EACA,oBAAqB,CACnB,MAAOF,EAAc,OACrB,MAAO,QACP,UAAWC,EACX,MAAOC,CACT,EACA,qBAAsB,CACpB,MAAOV,EAAMQ,EAAc,OAAQG,CAAoC,CACzE,CACF,EACA,WAAY,CACV,UAAW,CACT,MAAOX,EAAMQ,EAAc,QAASI,CAAuC,EAC3E,MAAO,QACP,UAAWH,EACX,MAAOC,CACT,EACA,oBAAqB,CACnB,MAAOF,EAAc,QACrB,MAAO,QACP,UAAWC,EACX,MAAOC,CACT,EACA,qBAAsB,CACpB,MAAOV,EAAMQ,EAAc,QAASG,CAAoC,CAC1E,CACF,EACA,YAAa,CAEX,UAAW,CACT,MAAOX,EAAMQ,EAAc,OAAQI,CAAuC,EAC1E,MAAO,QACP,UAAWH,EACX,MAAOC,CACT,EACA,oBAAqB,CACnB,MAAOF,EAAc,OACrB,MAAO,QACP,UAAWC,EACX,MAAOC,CACT,EACA,qBAAsB,CACpB,MAAOV,EAAMQ,EAAc,OAAQG,CAAoC,CACzE,CACF,EACA,aAAc,CACZ,WAAY,CACV,MAAOX,EAAMQ,EAAc,QAAS,EAAG,CACzC,EACA,qBAAsB,CACpB,MAAOR,EAAMQ,EAAc,QAAS,EAAG,CACzC,CACF,EACA,MAAO,CAGL,UAAW,CACT,MAAOR,EAAMQ,EAAc,UAAWI,CAAuC,EAC7E,MAAO,QACP,UAAWH,EACX,MAAOC,CACT,EACA,oBAAqB,CACnB,MAAOF,EAAc,UACrB,MAAO,QACP,UAAWC,EACX,MAAOC,CACT,EACA,qBAAsB,CACpB,MAAOV,EAAMQ,EAAc,UAAWG,CAAoC,CAC5E,CACF,CACF,EAMK,SAASG,GACd3B,EACiB,CAhUnB,IAAAC,EAiUE,OAAOU,IAA2BV,EAAAF,GAAaC,CAAK,IAAlB,OAAuB,OAAO,CAClE,CAMO,SAAS4B,GACd5B,EACiB,CA1UnB,IAAAC,EA2UE,OAAOyB,IAAgCzB,EAAAF,GAAaC,CAAK,IAAlB,OAAuB,OAAO,CACvE,CAEA,SAASa,EAAMgB,EAAoBhB,EAA4B,CAC7D,OAAOgB,EAAM,SAAW,EAClBA,EACA,KAAK,MAAMhB,EAAQ,GAAG,EACnB,SAAS,EAAE,EACX,SAAS,EAAG,GAAG,EACpBgB,CACN,mfCrVAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,EAgFO,MAAMC,CAA+E,CAyB1F,YACEC,EACAC,EACAC,EACAC,EACA,CA9BGC,EAAA,KAAAhB,CAAA,EACIgB,EAAA,KAAA9B,CAAA,EACA8B,EAAA,KAAA7B,EAAe,IAAI,oBAAqB,EACxC6B,EAAA,KAAA5B,CAAA,EAIA4B,EAAA,KAAA3B,CAAA,EACA2B,EAAA,KAAA1B,CAAA,EACA0B,EAAA,KAAAzB,MAA0B,GAAsB,EACzDyB,EAAA,KAASxB,EAA2C,SAAA,EAIzCwB,EAAA,KAAAvB,EAAA,IAAA,EACqCuB,EAAA,KAAAtB,EAAA,IAAA,EAChDsB,EAAA,KAAArB,CAAA,EACSqB,EAAA,KAAApB,CAAA,EACAoB,EAAA,KAAAnB,MAA0D,GAAI,EAC9DmB,EAAA,KAAAlB,MAA4B,GAGlC,EACuEkB,EAAA,KAAAjB,EAAA,IAAA,EAQxEkB,EAAA,KAAK/B,EAAUgC,GAAO,aAAa,4BAA6BJ,EAAa,EAAE,CAAA,EAC/EG,EAAA,KAAK5B,EAA4BuB,CAAA,EACjCK,EAAA,KAAK7B,EAAmByB,CAAA,EACxBI,EAAA,KAAKrB,EAAkBmB,CAAA,EACvBE,EAAA,KAAK3B,EAAgBwB,CAAA,CACvB,CAEA,MAAO,CACLK,EAAA,KAAKhC,CAAa,EAAA,IAChBiC,EACEC,EAAG,iBAAiBF,EAAK,KAAA9B,CAAA,EAA0B,QAAQ,EAC3D+B,EAAKE,GAAmBH,EAAK,KAAA9B,CAAA,EAA0B,QAAQ,EAAGkC,GAChEA,EAAcF,EAAG,UAAU,CAAE,SAAUE,CAAa,CAAA,EAAIC,EAC1D,EACAH,EAAG,UAAUI,GAAUC,EAAK,KAAA1B,EAAAE,EAAA,EAAL,UAA6BuB,CAAO,CAAA,CAC7D,CAAA,EAGFC,EAAA,KAAK1B,EAALO,EAAA,EAAA,KAAA,IAAA,EAEAY,EAAA,KAAKhC,CAAa,EAAA,IAChBiC,EACEC,EAAG,sBAAsBF,EAAK,KAAA7B,CAAA,EAAc,QAAQ,EACpD+B,EAAG,UAAUM,GAAYD,EAAK,KAAA1B,EAAAG,EAAA,EAAL,UAAgCwB,CAAS,CAAA,CACpE,CAAA,EAIFR,EAAA,KAAKhC,CAAa,EAAA,IAChBiC,EACEC,EAAG,sBAAsBF,EAAK,KAAAvB,CAAA,EAAgB,MAAM,EACpDyB,EAAG,OAAOO,GAAUA,EAAO,OAAS,aAAeA,EAAO,YAAY,EACtEP,EAAG,UAAU,IAAMF,EAAK,KAAAtB,CAAA,EAA+B,OAAO,CAChE,CAAA,EAQFsB,EAAA,KAAKhC,CAAa,EAAA,IAChBgC,EAAK,KAAA/B,CAAA,EAAiB,2BAA2B,UAAwCyC,GAAA,CAC5DA,EAAA,QACzBC,GAAAJ,EAAA,KAAK1B,EAALC,EAAA,EAAA,KAAA,KAAyC6B,EAAW,SAAS,WAAA,CAAA,EAG1DX,EAAA,KAAAjC,CAAA,EAAQ,QAAQ,+BAAgC,CACnD,WAAYiC,OAAK7B,CAAc,EAAA,GAC/B,gBAAiB8B,EACfS,EACAE,EAAkBD,GAAAA,EAAW,EAAE,EAC/BE,EACF,CAAA,CACD,CAAA,CACF,CAAA,CAEL,CAEA,oBAAoBC,EAA+D,CAC3E,MAAAC,MAAyB,IAEzBC,EAAaf,EACjBC,EAAG,iBAAiBY,CAAiB,EACrCZ,EAAG,IAAIe,GAAiCF,CAAkB,CAAC,EAC3Db,EAAG,UAAqBgB,GAAA,CACjBlB,EAAA,KAAAjC,CAAA,EAAQ,QAAQ,oBAAqB,CACxC,WAAYiC,OAAK7B,CAAc,EAAA,GAC/B,QAAA+C,CAAA,CACD,EACD,KAAM,CAAE,OAAAC,EAAQ,OAAAC,EAAQ,YAAAC,CAAY,EAAIC,GAAyBJ,CAAO,EAExEE,EAAO,QAAQG,GAAMR,EAAmB,OAAOQ,CAAE,CAAC,EAClDJ,EAAO,QAAQI,GAAMR,EAAmB,IAAIQ,CAAE,CAAC,EAC/CF,EAAY,QAAQE,GAAMR,EAAmB,IAAIQ,CAAE,CAAC,EAE/ChB,OAAK1B,EAALI,EAAA,EAAA,KAAA,KAA6B,CAAE,OAAAmC,EAAQ,OAAAD,EAAQ,YAAAE,CAAY,CAAA,CAAA,CACjE,CAAA,EAIE,OAAArB,EAAA,KAAAhC,CAAA,EAAa,IAAIgD,CAAU,EAEzBQ,EAAiB,IAAM,CAEvBjB,EAAA,KAAK1B,MAAL,KAA6B,KAAA,CAChC,OAAQkC,EACR,WAAY,IACZ,gBAAiB,GAAI,CACvB,EAEAU,GAAQT,CAAU,CAAA,CACnB,CACH,CAEA,4BACEU,EACAC,EACY,CACN,MAAAC,EAAuB,CAAE,SAAAF,EAAU,UAAAC,GACpC,OAAA3B,EAAA,KAAArB,CAAA,EAAsB,IAAIiD,CAAoB,EAC5CJ,EAAiB,IAAMxB,EAAA,KAAKrB,CAAsB,EAAA,OAAOiD,CAAoB,CAAC,CACvF,CAEA,qCAAqCF,EAAyD,CAC5F,OAAI1B,OAAKpB,CAA+B,GAMjCoB,EAAA,KAAAjC,CAAA,EAAQ,KAAK,0CAA0C,EAE9D+B,EAAA,KAAKlB,EAAgC8C,CAAA,EAC9BF,EAAiB,IAAO1B,EAAK,KAAAlB,EAAgC,IAAK,CAAA,CAC3E,CAwUA,MAAO,OAAO,YAAY,GAAI,CACtB,MAAAoB,EAAA,KAAKhC,GAAa,aAAa,CACvC,CACF,CA5dWD,EAAA,IAAA,QACAC,EAAA,IAAA,QACAC,EAAA,IAAA,QAIAC,EAAA,IAAA,QACAC,EAAA,IAAA,QACAC,EAAA,IAAA,QACAC,EAAA,IAAA,QACTC,EAAA,IAAA,QAIAC,EAAA,IAAA,QACAC,EAAA,IAAA,QACSC,EAAA,IAAA,QACAC,EAAA,IAAA,QACAC,EAAA,IAAA,QAITC,EAAA,IAAA,QAvBKC,EAAA,IAAA,QAoJLC,GAAmC,SAAC+C,EAAyB,CACvD7B,EAAK,KAAAtB,CAAA,EAA+B,IAAImD,CAAO,IAC9C7B,EAAA,KAAAtB,CAAA,EAA+B,IAAImD,CAAO,EAE1C5B,EACHD,EAAA,KAAKvB,GAAgB,KAAK,CACxB,OAAQ,WACR,KAAM,WACN,QAAS,SACT,QAAAoD,CAAA,CACD,EACDC,EACEC,KACE/B,EAAK,KAAAjC,CAAA,EAAQ,MAAM,8CAA8C,UAAWiE,CAAK,CACnF,CACF,CAAA,EAEJ,EAEAjD,GAAuB,SAACuB,EAA4C,CAvPtE,IAAApE,EAAAC,EAwPI,MAAM8F,GAAW/F,EAAAoE,EAAO,UAAP,KAAApE,EAAkB,GAC7BgG,GAAU/F,EAAAmE,EAAO,WAAP,KAAAnE,EAAmB,GAE9BgG,EAAgB,CAEnBlC,EACED,OAAK/B,CAAiB,EAAA,OACpBgE,EAAS,IAAkBG,GAAAC,EAAyBD,CAAU,CAAC,CACjE,EACAE,GACEP,EAAW,IAAM,CACXE,EAAS,OAAS,GACfjC,EAAA,KAAAjC,CAAA,EAAQ,QAAQ,iCAAkC,CACrD,WAAYiC,OAAK7B,CAAc,EAAA,GAC/B,cAAe8D,EAAS,IAASM,GAAAF,EAAyBE,CAAC,CAAC,EAC5D,SAAUN,EAAS,IAAIM,GAAKA,EAAE,EAAE,CAAA,CACjC,CACH,CACD,CACH,EACAT,EACEC,EAAWC,GACThC,OAAKjC,CAAQ,EAAA,MACX,oDACA,IAAIyE,GACFR,EACAC,EAAS,IAASM,GAAAA,EAAE,EAAE,CACxB,CACF,CACF,CACF,CACF,EAEAtC,EACEkC,EAAgBD,EAAQ,OAAkB3B,EAAK,KAAA1B,EAAAK,EAAA,EAAL,KAAoC,KAAAkD,CAAA,CAAW,CAAC,EAC1FE,GACEP,EAAW,IAAM,CACXG,EAAQ,OAAS,GACdlC,EAAA,KAAAjC,CAAA,EAAQ,QAAQ,kCAAmC,CACtD,WAAYiC,OAAK7B,CAAc,EAAA,GAC/B,cAAe+D,EAAQ,IAASK,GAAAF,EAAyBE,CAAC,CAAC,EAC3D,SAAUL,EAAQ,IAAIK,GAAKA,EAAE,EAAE,CAAA,CAChC,CACH,CACD,CACH,EACAT,EACEC,EAAWC,GACThC,OAAKjC,CAAQ,EAAA,MACX,mDACA,IAAI0E,GACFT,EACAE,EAAQ,IAASK,GAAAA,EAAE,EAAE,CACvB,CACF,CACF,CACF,CACF,CAAA,CACD,CACH,EAEAvD,GAA0B,SAACwB,EAAmB,CACxCA,GACGR,EAAA,KAAAjC,CAAA,EAAQ,QAAQ,mCAAoC,CACvD,WAAYiC,OAAK7B,CAAc,EAAA,EAAA,CAChC,EACI8B,EACHD,EAAA,KAAK/B,GAAiB,qBAAqB,CACzC,oBACA,oBACA,eACA,iBACA,8BAAA,CACD,EACD6D,EACEC,EACEC,GAAAhC,EAAA,KAAKjC,CAAQ,EAAA,MAAM,oDAAqDiE,CAAK,CAC/E,CACF,CAAA,IAGGhC,EAAA,KAAAjC,CAAA,EAAQ,QAAQ,oCAAqC,CACxD,WAAYiC,OAAK7B,CAAc,EAAA,EAAA,CAChC,EACI8B,EACHD,EAAK,KAAA/B,CAAA,EAAiB,kBAAkB,CAAC,mBAAmB,CAAC,EAC7D6D,EACEC,EAAWC,GACThC,OAAKjC,CAAQ,EAAA,MACX,iEACAiE,CACF,CACF,CACF,CAAA,EAGN,EAEM/C,GAAuB,eAAC,CAC5B,OAAAmC,EACA,OAAAD,EACA,YAAAE,CACF,EAIG,CAlWL,IAAAnF,EAAAC,EAmWI,MAAMuG,EAAoC,CAAA,EAE1CA,EAAa,KAAK1C,EAAK,KAAA/B,CAAA,EAAiB,cAAcmD,EAAQ,EAAK,CAAC,EACpEsB,EAAa,KAAK1C,EAAK,KAAA/B,CAAA,EAAiB,cAAckD,EAAQ,EAAI,CAAC,EAEnEC,EAAO,QAAcG,GAAAvB,EAAA,KAAK5B,CAAoB,EAAA,OAAOmD,CAAE,CAAC,EACxDJ,EAAO,QAAcI,GAAAvB,EAAA,KAAK5B,CAAoB,EAAA,IAAImD,CAAE,CAAC,EACrDF,EAAY,QAAcE,GAAAvB,EAAA,KAAK5B,CAAoB,EAAA,IAAImD,CAAE,CAAC,EAEpD,MAAAoB,EAAkB1C,EAAKoB,EAAauB,GAAK,CAAC,EAAG/B,EAAO,EAAE,GAAG,CAAC,EAChE,GAAI8B,EAAiB,CAEnB,GAAIA,MAAoBzG,EAAA8D,EAAA,KAAK1B,CAAL,IAAA,KAAA,OAAApC,EAAyB,cAAc,OAE/DwG,EAAa,KAAK1C,EAAK,KAAA/B,CAAA,EAAiB,MAAM0E,EAAiB3C,EAAA,KAAKxB,EAAwB,CAAC,CAAA,OAI7FrC,EAAA6D,EAAA,KAAK1B,KAAL,KAAyB,OAAAnC,EAAA,gBAAiB,QAC1CgF,EAAO,IAAInB,EAAK,KAAA1B,CAAA,EAAmB,YAAY,GAG/CoE,EAAa,KAAK1C,EAAA,KAAK/B,CAAiB,EAAA,MAAM,IAAI,CAAC,EAG/C,MAAA4E,GACJ5C,EACEkC,EAAgBO,CAAY,EAC5BZ,EACEC,EACEC,GAAAhC,EAAA,KAAKjC,CAAQ,EAAA,MAAM,oDAAqDiE,CAAK,CAC/E,CACF,CACF,EACA,CACE,UAAW,IACX,aAAc,OACd,UAAW,IAAMhC,EAAK,KAAAjC,CAAA,EAAQ,KAAK,8CAA8C,CACnF,CAAA,CAEJ,EAEAmB,GAA8B,SAACkD,EAA6D,CA7Y9F,IAAAlG,EA8YU,MAAAqF,EAAKc,EAAyBD,CAAU,EACxCU,IAAU5G,EAAA8D,EAAA,KAAK1B,CAAL,IAAA,KAAA,OAAApC,EAAyB,gBAAiBqF,EAEnD,OAAAvB,EAAA,KAAK/B,GAAiB,OAAO,CAClC,GAAAsD,EACA,SAAUwB,GAAoBX,EAAW,MAAM,GAAG,EAClD,SAAUY,GACRZ,EAAW,MACX7B,EAAA,KAAK1B,EAALM,EAAA,EAAA,KAAA,KAA0BiD,EAAW,KAAA,EACrCU,EACAV,EAAW,MAAM,aACnB,EACA,WAAYU,EACR,UACA9C,OAAK5B,CAAoB,EAAA,IAAImD,CAAE,EAC7B,UAEA,SACN,SAAU,CAAE,YAAaa,EAAW,MAAM,GAAI,aAAcA,EAAW,EAAG,CAAA,CAC3E,CACH,EAEAjD,GAAoB,SAAClD,EAAsC,CACrD,GAAA+D,EAAA,KAAK3B,KAAsB,UAC7B,OAAOR,GAAmC5B,CAAK,EACjD,GAAW+D,EAAK,KAAA3B,CAAA,IAAsB,UACpC,OAAOT,GAAuB3B,CAAK,EAE7B,MAAA,IAAIgH,GAAqBjD,EAAA,KAAK3B,CAAiB,CAAA,CAEzD,EAEAe,GAA8B,UAAG,CAC/BY,EAAA,KAAKhC,CAAa,EAAA,IAChBgC,EAAA,KAAK/B,GAAiB,qBAAqB,UAAU,CAAC,CAAE,aAAAiF,EAAc,aAAAC,KAAmB,CACvF,GAAID,EAAc,CAEhB,GAAIlD,EAAK,KAAAzB,CAAA,IAAyB2E,EAAa,WAAW,GAAI,OAEzDpD,EAAA,KAAAvB,EAAuB2E,EAAa,WAAW,EAAA,EAC/CpD,EAAA,KAAAtB,EAA2B0E,EAAa,QAAQ,EAAA,EACrD3C,EAAA,KAAK1B,KAAL,KAAmC,KAAAqE,CAAA,CACrC,CACIC,GAGAnD,EAAA,KAAKzB,CAAyB,IAAA4E,EAAa,WAAW,KAEtDD,GAAA,KAAA,OAAAA,EAAc,WAAW,MAAOlD,EAAK,KAAAzB,CAAA,IAGrCuB,EAAA,KAAKvB,EAAuB,IAAA,EAC5BuB,EAAA,KAAKtB,EAA2B,MAAA,EAChC+B,EAAA,KAAK1B,KAAL,KAAmC,KAAAsE,CAAA,EAEvC,CACD,CAAA,EAEHnD,EAAA,KAAKhC,CAAa,EAAA,IAChBgC,EAAK,KAAA/B,CAAA,EAAiB,eAAe,UAAmBmF,GAAA,CACjDtD,EAAA,KAAAtB,EAA2B4E,EAAM,QAAQ,EAAA,EAC9C7C,EAAA,KAAK1B,KAAL,KAAmC,KAAAuE,CAAA,CAAA,CACpC,CAAA,EAIHpD,EAAA,KAAKhC,CAAa,EAAA,IAChBgC,EAAA,KAAK/B,GAAiB,cAAc,UAAU,CAAC,CAAE,WAAA0C,EAAY,QAAA0C,EAAS,QAAAP,KAAc,CAjd1F,IAAA5G,EAkdY4G,GACFhD,EAAA,KAAKxB,EAAqB,CAAE,aAAcqC,EAAW,GAAI,UAAW0C,iBAAS,EAAG,CAAA,EAC3E9C,EAAA,KAAA1B,EAAAQ,EAAA,EAAL,UAA0BsB,EAAY0C,CAAA,MAElCnH,EAAK8D,EAAA,KAAA1B,CAAA,IAAL,KAAyB,OAAApC,EAAA,gBAAiByE,EAAW,IACvDb,EAAA,KAAKxB,EAAqB,IAAA,EAE5BiC,EAAA,KAAK1B,MAAL,KAA4B,KAAA8B,CAAA,EAC9B,CACD,CAAA,CAEL,EAEAtB,GAAoB,SAClBsB,EACA2C,EACA,CACA3C,EAAW,SAAS,WAClB4B,EAAE,MACAgB,GAAuB,CACrB,YAAahB,EAAE,SACf,eAAgBA,EAAE,MAAOe,GAA0B,KAAA,OAAAA,EAAA,IACnD,kBAAmB,EAAA,CACpB,CACH,CAAA,CAEJ,EAEAhE,GAAsB,SAACqB,EAAgC,CACrDA,EAAW,SAAS,WAClB4B,EAAE,MACAgB,GAAuB,CACrB,YAAahB,EAAE,SACf,eAAgB,GAChB,kBAAmB,EAAA,CACpB,CACH,CAAA,CAEJ,EAEAhD,EAA6B,SAAC,CAC5B,KAAAiE,EACA,KAAAC,EACA,gBAAAC,EACA,SAAAC,EACA,WAAAhD,CACF,EAA6F,CAhgB/F,IAAAzE,EAAAC,EAigBQ,GAAAqH,IAAS,aAAeA,IAAS,cAAe,OAE/CxD,EAAA,KAAAjC,CAAA,EAAQ,QAAQ,wBAAyB,CAC5C,KAAAyF,EACA,WAAY7C,EAAW,GACvB,WAAYX,OAAK7B,CAAc,EAAA,EAAA,CAChC,EAED,MAAMyF,EAAW5D,EAAA,KAAK7B,CAAc,EAAA,SAAS,SAAW,EAAA,SAClD0F,EAAyB,CAC7B,GAAG3H,EAAA0H,GAAA,KAAA,OAAAA,EAAU,cAAc,IAAxB,KAA6B1H,EAAA,EAChC,GAAGC,EAAAyH,GAAA,KAAA,OAAAA,EAAU,cAAc,IAAxB,KAA6BzH,EAAA,CAAA,EAE5B2H,EAAgBC,GAAeF,CAAsB,EACrDG,EAAmB,CACvB,KAAAR,EACA,aAAc7C,EAAW,GACzB,aAAcA,EAAW,SAAS,aAClC,SAA6BsD,GAAgBJ,CAAsB,EAAEF,CAAQ,EAC7E,KAAwBG,EAAcL,CAAI,EAC1C,gBAAiBC,EAAgB,IAAID,GAA0BK,EAAcL,CAAI,CAAE,CAAA,EAGrF,IAAIS,EAAU,GAEdjE,EACED,EAAK,KAAArB,CAAA,EAELwF,GAAO,CAAC,CAAE,UAAAxC,CAAgB,IAAAA,EAAUqC,CAAgB,CAAC,EACrDpD,EAAImB,EAAW,IAAOmC,EAAU,EAAK,CAAC,EACtCtD,EAAI,CAAC,CAAE,SAAAc,CAAe,IAAAA,EAASsC,CAAgB,CAAC,EAEhDI,GACE,CAACF,GAAWlE,EAAA,KAAKpB,CACb,EAAA,CAACoB,OAAKpB,CAAL,EAAA,KAAA,KAAmCoF,CAAiB,CAAA,EACrD,CAAC,CACP,EACAK,EAAA,CAEJ,EAOK,SAASd,GAAuB,CACrC,YAAAe,EACA,eAAAC,EACA,kBAAAC,CACF,EAQE,CA3jBF,IAAAtI,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EA4jBE,OAAIiI,EACK,CAEL,YAAa,GACb,YAEE,CAACF,EAAY,cAAgBA,EAAY,OAAS,eAC9CnI,GAAAD,EAAAoI,EAAY,MAAM,uBAAlB,KAA0CpI,EAAAoI,EAAY,MAAM,aAA5D,OACA,KACN,UAEEA,EAAY,cAAgB,CAACC,EACzB,KAEAD,EAAY,OAAS,cACnBjI,GAAYD,EAAAkI,EAAA,MAAM,sBAAlB,KAAAlI,EAAyCkI,EAAY,MAAM,YAA3D,KAAAjI,EACA,IAAA,EAGH,CAEL,YAAaiI,EAAY,OAAS,YAClC,YAAYhI,EAAAgI,EAAY,MAAM,aAAlB,KAAgChI,EAAA,KAC5C,UAAWgI,EAAY,OAAS,YAAc,MAAO/H,EAAY+H,EAAA,MAAM,YAAlB,KAA+B/H,EAAA,IAAA,CAG1F,CAEA,SAAS0E,GACPF,EAC4F,CAC5F,OAAwB0D,GAAA,CACtB,MAAMC,EAAkBnD,GACtBA,EAAG,OAAS,aAAeA,EAAG,aAAec,EAAyB,CAAE,GAAId,EAAG,YAAc,CAAA,EAC/F,GAAIkD,EAAc,QACT,OAAAA,EAAc,QAAQ,IAAenE,IAAA,CAC1C,aAAcoE,EAAepE,EAAO,EAAE,EACtC,WAAYA,EAAO,UACnB,EAAA,EACG,CACL,MAAMqE,EAAoB,IAAI,IAC5BF,EAAc,QAAQ,QAAQnE,GAC5BA,EAAO,aAAe,SAAW,GAAK,CAACoE,EAAepE,EAAO,EAAE,CAAC,CAClE,CAAA,EAEIsE,EAAkB3E,EACtBc,EAAmB,WAAW4D,CAAiB,EAC/C/D,EAAqBiE,IAAA,CACnB,aAAAA,EACA,WAAY,QAAA,EACZ,EACFhE,EAAA,EAEK,OAAA4D,EAAc,QAClB,IAAenE,IAAA,CACd,aAAcoE,EAAepE,EAAO,EAAE,EACtC,WAAYA,EAAO,UAAA,EACnB,EACD,OAAOsE,CAAe,CAC3B,CAAA,CAEJ,CAEA,SAAStD,GAAyBJ,EAAoD,CAC9E,MAAAC,MAAa,IACbC,MAAa,IACbC,MAAkB,IAExB,UAAWf,KAAUY,EACf,GAAAZ,EAAO,aAAe,SACjBc,EAAA,IAAId,EAAO,YAAY,UACrBA,EAAO,aAAe,UACxBa,EAAA,IAAIb,EAAO,YAAY,UACrBA,EAAO,aAAe,aACxBa,EAAA,IAAIb,EAAO,YAAY,EAClBe,EAAA,IAAIf,EAAO,YAAY,MAE7B,OAAA,IAAI2C,GAAqB3C,EAAO,UAAU,EAG7C,MAAA,CAAE,OAAAa,EAAQ,OAAAC,EAAQ,YAAAC,EAC3B,CAEA,SAASgB,EAAyBD,EAAsD,CAC/E,OAAA,OAAOA,EAAW,EAAE,CAC7B,CAEA,SAASY,GACP/G,EACA6I,EACAhC,EACAiC,EACAC,EACqE,CACrE,OAAID,EACKA,EAAc,WAAW,IAAI,CAAC,CAAE,KAAAE,EAAM,EAAA1C,EAAG,EAAA2C,CAAA,EAAKC,EAAGC,IAAe,CA3pB3E,IAAAlJ,EAAAC,EA4pBM,MAAMmI,EAAc,CAClB,KAAMW,IAAS,YAAc,YAAc,OAC3C,aAAcG,EAAW,KAAUC,IAAAA,GAAE,OAAS,WAAW,EACzD,aAAcL,IAAiB,GAC/B,MAAAF,CAAA,EAGI,CAAE,YAAAQ,GAAa,UAAAC,GAAW,WAAAC,EAAA,EAAejC,GAAuB,CAIpE,eAAgB,GAChB,kBAAmBT,EACnB,YAAAwB,CAAA,CACD,EAEM,MAAA,CACL,MAAO,CACL,MAAO/B,IAAKrG,EAAe6I,GAAA,KAAA,OAAAA,EAAA,QAAQ,IAAvB,KAA4B7I,EAAA,GACxC,IAAKgJ,IAAK/I,EAAe4I,GAAA,KAAA,OAAAA,EAAA,QAAQ,IAAvB,KAA4B5I,EAAA,EACxC,EACA,gBAAiBsJ,GAAyB,OAC1C,SAAUnB,EACV,YAAAgB,GACA,UAAWC,IAAa,KAAAA,GAAA,OACxB,WAAYC,IAAc,KAAAA,GAAA,MAAA,CAC5B,CACD,EACQvJ,EAAM,UACRA,EAAM,UACV,WACC+G,GAAyB/G,EAAO6I,EAAOhC,EAAS4C,EAAS,cAAe,EAAI,CAAA,EAE7E,OAAOC,EAAa,EAEhB,EAEX,CAEA,MAAMlD,WAA8BmD,EAAY,CAG9C,YAAYC,EAAczF,EAAqC,CAC7D,MAAM,8BAA+ByF,CAAK,EAHnCC,GAAA,KAAA,aAAA,EAIF,KAAA,YAAc,MAAM,KAAK1F,CAAW,CAC3C,CAES,QAAS,CAChB,MAAO,CAAE,GAAG,MAAM,SAAU,YAAa,KAAK,YAChD,CACF,CAEA,MAAMoC,WAA+BoD,EAAY,CAG/C,YAAYC,EAAczF,EAAqC,CAC7D,MAAM,8BAA+ByF,CAAK,EAHnCC,GAAA,KAAA,aAAA,EAIF,KAAA,YAAc,MAAM,KAAK1F,CAAW,CAC3C,CAES,QAAS,CAChB,MAAO,CAAE,GAAG,MAAM,SAAU,YAAa,KAAK,YAChD,CACF,CChrBO,MAAM2F,GAAgCC,GAC3C,OAAO,0BAA0B,CACnC,EAGMC,GAA+BD,GACnC,OAAO,yBAAyB,CAClC,EAGaE,GACXC,GAAAlG,EACEmG,GAAW,CACTD,EAAQ,kBAAkB,kBAAkB,EAC5CA,EAAQ,WAAW,kBAAkB,EACrCA,EAAQ,WAAW,iBAAiB,EACpCA,EAAQ,WAAW,iBAAiB,EACpCA,EAAQ,WAAW,MAAM,CAAA,CACjB,EACVE,GACE,CAAC,CACCC,EACAC,EACAC,EACAC,EACAC,CAAA,IAEAC,GAAiB,IAAI,CACnB,GAAGC,GACDN,EACAG,EACAD,EACAD,EACAG,CACF,EACAG,GACEP,EAAqB,QAAQ,MAAMQ,GACjCH,GAAiB,IAAI,CACnBI,GAAiCD,EAAWP,CAAsB,EAClEtG,EACE6G,EAAU,QAAQtH,CAAyB,EAC3CwH,EAAsBC,GAAAA,EAAQ,MAAM,EACpCD,EAAW,IAAMxF,EAAiB0F,EAAS,CAAC,CAC9C,CAAA,CACD,CACH,CACF,CAAA,CACD,CACL,CACF,EAEF,SAASN,GACPN,EACAG,EACAD,EACAD,EACAG,EACA,CACO,MAAA,CACLJ,EAAqB,SAAS,CAC5B,MAAOP,GACP,SAAUvG,CAAA,CACX,EACD8G,EAAqB,SACnB,CACE,MAAOL,GACP,WACEkB,GAAAlH,EACEkH,EAAS,QAAQV,EAAsB,SAAS,qBAAqB,EACrEO,EAAWI,GACTA,EAAsB,YAAY,MAA+B,CACnE,CACF,CACJ,EACA,CAAE,SAAUC,GAAS,eAAgB,CACvC,EACAf,EAAqB,SACnB,CACE,MAAO9G,EACP,WAAY8H,GAAc9H,EAA2B,CACnDgH,EAAsB,SAAS,yBAC/BP,GACAM,EAAuB,SAAS,aAChCG,EAAY,SAAS,cAAA,CACtB,CACH,EACA,CAAE,SAAUW,GAAS,eAAgB,CACvC,CAAA,CAEJ,CAEA,SAASN,GACPD,EACAP,EACkB,CACX,OAAAtG,EACLmG,GAAW,CACTU,EAAU,QAAQP,EAAuB,SAAS,sBAAsB,EACxEO,EAAU,QAAQS,EAAc,CAAA,CACxB,EACVP,EAAW,CAAC,CAACQ,EAAwBC,CAAS,IAC5CxH,EACEC,EAAG,sBAAsBsH,EAAuB,gBAAgB,EAChEtH,EAAG,qBAAqB,EACxBA,EAAG,aAAa,GAAG,EACnBA,EAAG,OAA2BwH,GAAAA,IAAqB,IAAI,EACvDxH,EAAG,UAAU,IAAM,CACjBH,GAAO,QAAQ,oDAAoD,EAC9D0H,EAAU,cAAcE,GAAK,CAAW,CAAA,CAC9C,CACH,CACF,CAAA,CAEJ","x_google_ignoreList":[0]}