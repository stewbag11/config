{"version":3,"file":"NonEmptyArrayFns-oGa02u-CLyX5YlY.js","sources":["../../../util-array/dist/NonEmptyArrayFns-oGa02u.mjs"],"sourcesContent":["/**\n * Create a non-empty array from an array. Returns `null` if the array is empty\n * @public\n */\nfunction from(xs) {\n    const arr = Array.isArray(xs) ? xs : Array.from(xs);\n    return arr.length > 0 ? arr : null;\n}\n/**\n * Map a function over a non-empty array\n * @public\n */\nfunction map(fn) {\n    return xs => xs.map(fn);\n}\n/**\n * Zips the values of a pair of non-empty arrays together. The zipping will stop when the shortest array is exhausted.\n * @public\n * @param a - The first array to be zipped.\n * @param b - The second array to be zipped.\n * @returns Returns a new non-empty array with pairs of values.\n */\nfunction zip(a, b) {\n    const result = [[a[0], b[0]]];\n    for (let i = 1; i < a.length && i < b.length; i++) {\n        result.push([a[i], b[i]]);\n    }\n    return result;\n}\n/**\n * Matches an array with the provided matchers.\n * @public\n * @param matchers - The matchers to match on the none-empty or empty cases.\n * @returns The transformed value.\n */\nfunction match(matchers) {\n    return array => array.length > 0 ? matchers.nonEmpty(array) : matchers.empty();\n}\n\nexport { from, map, match, zip };\n//# sourceMappingURL=NonEmptyArrayFns-oGa02u.mjs.map\n"],"names":["from","xs","arr","map","fn","match","matchers","array"],"mappings":"AAIA,SAASA,EAAKC,EAAI,CACd,MAAMC,EAAM,MAAM,QAAQD,CAAE,EAAIA,EAAK,MAAM,KAAKA,CAAE,EAClD,OAAOC,EAAI,OAAS,EAAIA,EAAM,IAClC,CAKA,SAASC,EAAIC,EAAI,CACb,OAAOH,GAAMA,EAAG,IAAIG,CAAE,CAC1B,CAqBA,SAASC,EAAMC,EAAU,CACrB,OAAOC,GAASA,EAAM,OAAS,EAAID,EAAS,SAASC,CAAK,EAAID,EAAS,OAC3E"}