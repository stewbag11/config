{"version":3,"file":"RandomSampler-Ba-P26-DyiLAlld.js","sources":["../../../util-sampling/dist/RandomSampler-Ba-P26.mjs"],"sourcesContent":["/**\n * A sampler that selects events randomly based on a probability threshold.\n * @public\n */\nclass RandomSampler {\n    #probability;\n    /**\n     * @param probability - The probability that an event will be selected.\n     \n     */\n    constructor({ probability }) {\n        this.#probability = Math.max(0, Math.min(1, probability));\n    }\n    /** {@inheritDoc Sampler} */\n    shouldSelect() {\n        return Math.random() < this.#probability;\n    }\n}\nconst sample = /*@__PURE__*/ Math.random();\n/**\n * A sampler to select user randomly based on a probability threshold.\n *\n * @remarks\n * A random number is generated once and used for all instances of this class.\n * This is done to ensure that all instances of this class with the same probability\n * will either select or not select a user. This is useful for coordinating metrics\n * collection across different parts of the codebase.\n *\n * @public\n */\nclass RandomUserSampler {\n    #probability;\n    /**\n     * @param probability - The probability to select a user.\n     */\n    constructor({ probability }) {\n        this.#probability = Math.max(0, Math.min(1, probability));\n    }\n    /** {@inheritDoc Sampler} */\n    shouldSelect() {\n        return sample < this.#probability;\n    }\n}\n\nexport { RandomSampler, RandomUserSampler };\n//# sourceMappingURL=RandomSampler-Ba-P26.mjs.map\n"],"names":["sample","_probability","RandomUserSampler","probability","__privateAdd","__privateSet","__privateGet"],"mappings":"2UAkBA,MAAMA,EAAuB,KAAK,SAlBlC,IAAAC,EA8BA,MAAMC,CAAkB,CAKpB,YAAY,CAAE,YAAAC,GAAe,CAJ7BC,EAAA,KAAAH,GAKII,EAAA,KAAKJ,EAAe,KAAK,IAAI,EAAG,KAAK,IAAI,EAAGE,CAAW,CAAC,EAC3D,CAED,cAAe,CACX,OAAOH,EAASM,EAAA,KAAKL,EACxB,CACL,CAXIA,EAAA"}